-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lenet5_ap2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    index : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_bias_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    conv_bias_ce0 : OUT STD_LOGIC;
    conv_bias_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    in_r_address0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    conv_weight_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv_weight_ce0 : OUT STD_LOGIC;
    conv_weight_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    conv_dot_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    conv_dot_ce0 : OUT STD_LOGIC;
    conv_dot_we0 : OUT STD_LOGIC;
    conv_dot_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    conv_dot_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    pool_dot_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    pool_dot_ce0 : OUT STD_LOGIC;
    pool_dot_we0 : OUT STD_LOGIC;
    pool_dot_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    pool_dot_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    fc_in_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    fc_in_ce0 : OUT STD_LOGIC;
    fc_in_we0 : OUT STD_LOGIC;
    fc_in_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    fc_in_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    fc_weight_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    fc_weight_ce0 : OUT STD_LOGIC;
    fc_weight_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    fc_bias_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    fc_bias_ce0 : OUT STD_LOGIC;
    fc_bias_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    fc_dot_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    fc_dot_ce0 : OUT STD_LOGIC;
    fc_dot_we0 : OUT STD_LOGIC;
    fc_dot_d0 : OUT STD_LOGIC_VECTOR (unknown downto unknown);
    fc_dot_q0 : IN STD_LOGIC_VECTOR (unknown downto unknown);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of lenet5_ap2 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "lenet5_ap2,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.184800,HLS_SYN_LAT=6540444,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=15,HLS_SYN_FF=10121,HLS_SYN_LUT=7422}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (146 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (146 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (146 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (146 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (146 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (146 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (146 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state142 : STD_LOGIC_VECTOR (146 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state143 : STD_LOGIC_VECTOR (146 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state144 : STD_LOGIC_VECTOR (146 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state145 : STD_LOGIC_VECTOR (146 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state146 : STD_LOGIC_VECTOR (146 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state147 : STD_LOGIC_VECTOR (146 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_89 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_79 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111001";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv32_7C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_91 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010001";
    constant ap_const_lv32_92 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_7A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_85 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000101";
    constant ap_const_lv32_8B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv61_2 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv56_2 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv59_2 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv60_2 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv57_2 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv59_1 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv54_1 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv57_1 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv56_1 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv58_1 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv55_1 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv9_19 : STD_LOGIC_VECTOR (8 downto 0) := "000011001";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_78 : STD_LOGIC_VECTOR (7 downto 0) := "01111000";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv17_BB80 : STD_LOGIC_VECTOR (16 downto 0) := "01011101110000000";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv9_F0 : STD_LOGIC_VECTOR (8 downto 0) := "011110000";
    constant ap_const_lv17_17700 : STD_LOGIC_VECTOR (16 downto 0) := "10111011100000000";
    constant ap_const_lv9_168 : STD_LOGIC_VECTOR (8 downto 0) := "101101000";
    constant ap_const_lv18_23280 : STD_LOGIC_VECTOR (17 downto 0) := "100011001010000000";
    constant ap_const_lv25_2710 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010011100010000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (146 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_1029 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal reg_1034 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_fu_1017_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1039 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal ap_CS_fsm_state133 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state133 : signal is "none";
    signal grp_fu_1006_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal ap_CS_fsm_state138 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state138 : signal is "none";
    signal reg_1053 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal ap_CS_fsm_state121 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state121 : signal is "none";
    signal ap_CS_fsm_state144 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state144 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal reg_1065 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal reg_1070 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal ap_CS_fsm_state127 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state127 : signal is "none";
    signal reg_1075 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal ap_CS_fsm_state139 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state139 : signal is "none";
    signal reg_1080 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_1085_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_reg_3287 : STD_LOGIC_VECTOR (24 downto 0);
    signal channel_1_fu_1095_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal channel_1_reg_3295 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond25_fu_1089_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_1130_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_3311 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_1146_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_3316 : STD_LOGIC_VECTOR (63 downto 0);
    signal col_1_fu_1158_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal col_1_reg_3324 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_19_fu_1197_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_19_reg_3329 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond29_fu_1152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_1_fu_1209_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal row_1_reg_3337 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal conv_dot_addr_reg_3342 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond28_fu_1203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fil_col_1_fu_1239_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal fil_col_1_reg_3350 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_15_fu_1245_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_15_reg_3355 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond27_fu_1233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_cast_fu_1251_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_17_cast_reg_3360 : STD_LOGIC_VECTOR (13 downto 0);
    signal fil_row_1_fu_1265_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal fil_row_1_reg_3368 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_3280_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_137_reg_3373 : STD_LOGIC_VECTOR (24 downto 0);
    signal exitcond26_fu_1259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_142_fu_1319_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_142_reg_3378 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal in_load_reg_3393 : STD_LOGIC_VECTOR (63 downto 0);
    signal notlhs_fu_1350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_reg_3398 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal notrhs_fu_1356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_3403 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1021_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_reg_3408 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_value_load_reg_3413 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal channel_2_fu_1389_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal channel_2_reg_3421 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_1415_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_3426 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond24_fu_1383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_1441_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_3431 : STD_LOGIC_VECTOR (63 downto 0);
    signal col_2_fu_1453_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal col_2_reg_3440 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal tmp_7_fu_1459_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_reg_3445 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond23_fu_1447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_1500_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_42_reg_3450 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_57_fu_1539_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_57_reg_3455 : STD_LOGIC_VECTOR (14 downto 0);
    signal row_2_fu_1551_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal row_2_reg_3463 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal tmp_11_fu_1557_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_reg_3468 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond22_fu_1545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fil_col_2_fu_1589_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal fil_col_2_reg_3481 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal tmp_134_fu_1633_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_134_reg_3486 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond21_fu_1583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fil_row_2_fu_1668_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal fil_row_2_reg_3494 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal exitcond20_fu_1662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_reg_3504 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal max_value_5_fu_1776_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal i_1_fu_1790_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_3517 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal exitcond19_fu_1784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_1829_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_reg_3534 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_1855_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_reg_3539 : STD_LOGIC_VECTOR (63 downto 0);
    signal col_3_fu_1867_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal col_3_reg_3547 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal tmp_96_fu_1906_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_96_reg_3552 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond18_fu_1861_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_3_fu_1918_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal row_3_reg_3560 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal conv_dot_addr_2_reg_3565 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond17_fu_1912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fil_col_3_fu_1948_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal fil_col_3_reg_3573 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal tmp_41_fu_1960_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_41_reg_3578 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond16_fu_1942_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_cast_fu_1964_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_42_cast_reg_3583 : STD_LOGIC_VECTOR (13 downto 0);
    signal fil_row_3_fu_1978_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal fil_row_3_reg_3591 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal tmp_65_cast_fu_1990_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_65_cast_reg_3596 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond15_fu_1972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_fu_1994_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_reg_3601 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_1_fu_2004_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal n_1_reg_3609 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal tmp_178_fu_2045_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_178_reg_3614 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond14_fu_1998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_179_fu_2049_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_179_reg_3619 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_182_fu_2053_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_182_reg_3624 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_181_fu_2078_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_181_reg_3630 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal tmp_186_fu_2098_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_186_reg_3635 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_187_fu_2102_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_187_reg_3640 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal pool_dot_load_1_reg_3655 : STD_LOGIC_VECTOR (63 downto 0);
    signal notlhs1_fu_2150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_reg_3660 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal notrhs1_fu_2156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs1_reg_3665 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_84_reg_3670 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_value_1_load_reg_3675 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal i_2_fu_2189_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_3683 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_65_fu_2215_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_65_reg_3688 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond13_fu_2183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_fu_2241_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_76_reg_3693 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_fu_2253_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_3702 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal tmp_21_fu_2259_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_21_reg_3707 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond12_fu_2247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_124_fu_2300_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_124_reg_3712 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_128_fu_2339_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_128_reg_3717 : STD_LOGIC_VECTOR (14 downto 0);
    signal k_2_fu_2351_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_2_reg_3725 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal tmp_36_fu_2357_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_36_reg_3730 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond11_fu_2345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal l_1_fu_2389_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal l_1_reg_3743 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal tmp_165_fu_2433_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_165_reg_3748 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond10_fu_2383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_1_fu_2468_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_1_reg_3756 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal exitcond9_fu_2462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_112_reg_3766 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal max_value_11_fu_2576_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal next_mul_fu_2584_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal next_mul_reg_3776 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal i_3_fu_2596_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_3784 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_108_fu_2622_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_108_reg_3789 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond8_fu_2590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_2638_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_2_reg_3797 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal tmp_147_fu_2677_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_147_reg_3802 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond7_fu_2632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_cast_fu_2697_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp8_cast_reg_3807 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_1_fu_2711_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_1_reg_3815 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal exitcond6_fu_2705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_fu_2737_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_59_reg_3825 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_4_fu_2752_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal col_4_reg_3833 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal tmp_32_cast1_fu_2763_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_32_cast1_reg_3838 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond5_fu_2746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fc_bias_addr_reg_3843 : STD_LOGIC_VECTOR (8 downto 0);
    signal fc_dot_addr_reg_3848 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_4_fu_2788_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal row_4_reg_3856 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal tmp_159_fu_2830_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_159_reg_3861 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond4_fu_2782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal fc_in_load_reg_3876 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_98_reg_3881 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal i_4_fu_2900_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_4_reg_3889 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal tmp_33_cast1_fu_2911_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_33_cast1_reg_3894 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond3_fu_2894_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fc_bias_addr_1_reg_3899 : STD_LOGIC_VECTOR (8 downto 0);
    signal fc_dot_addr_1_reg_3904 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_3_fu_2936_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_3_reg_3912 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal tmp_172_fu_2982_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_172_reg_3917 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond2_fu_2930_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal tmp_103_reg_3932 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state122 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state122 : signal is "none";
    signal max_index_1_cast_fu_3046_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_index_1_cast_reg_3937 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state124 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state124 : signal is "none";
    signal i_5_fu_3056_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_3945 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_47_cast1_fu_3067_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_47_cast1_reg_3950 : STD_LOGIC_VECTOR (17 downto 0);
    signal exitcond1_fu_3050_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fc_bias_addr_2_reg_3955 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_4_fu_3092_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_4_reg_3968 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state125 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state125 : signal is "none";
    signal tmp_196_fu_3138_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_196_reg_3973 : STD_LOGIC_VECTOR (17 downto 0);
    signal exitcond_fu_3086_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_72_fu_3143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_72_reg_3978 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state126 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state126 : signal is "none";
    signal tmp_121_reg_3995 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state145 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state145 : signal is "none";
    signal sel_tmp2_fu_3253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_reg_4000 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state146 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state146 : signal is "none";
    signal max_index_2_fu_3259_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_index_2_reg_4005 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_value_12_fu_3273_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state147 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state147 : signal is "none";
    signal channel_reg_486 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_reg_498 : STD_LOGIC_VECTOR (4 downto 0);
    signal row_reg_510 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_3_reg_522 : STD_LOGIC_VECTOR (63 downto 0);
    signal fil_col_reg_534 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_18_reg_545 : STD_LOGIC_VECTOR (63 downto 0);
    signal fil_row_reg_557 : STD_LOGIC_VECTOR (2 downto 0);
    signal channel1_reg_568 : STD_LOGIC_VECTOR (2 downto 0);
    signal col2_reg_579 : STD_LOGIC_VECTOR (3 downto 0);
    signal row3_reg_590 : STD_LOGIC_VECTOR (3 downto 0);
    signal fil_col4_reg_602 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_value_3_reg_613 : STD_LOGIC_VECTOR (63 downto 0);
    signal fil_row5_reg_624 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_value_4_reg_635 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_647 : STD_LOGIC_VECTOR (4 downto 0);
    signal col6_reg_659 : STD_LOGIC_VECTOR (3 downto 0);
    signal row7_reg_671 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal tmp_31_reg_683 : STD_LOGIC_VECTOR (63 downto 0);
    signal fil_col8_reg_695 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_50_reg_706 : STD_LOGIC_VECTOR (63 downto 0);
    signal fil_row9_reg_718 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_68_reg_729 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_reg_741 : STD_LOGIC_VECTOR (2 downto 0);
    signal i1_reg_752 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_763 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_774 : STD_LOGIC_VECTOR (2 downto 0);
    signal l_reg_786 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_value_9_reg_797 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_reg_808 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_value_8_reg_819 : STD_LOGIC_VECTOR (63 downto 0);
    signal i2_reg_831 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_842 : STD_LOGIC_VECTOR (8 downto 0);
    signal j1_reg_854 : STD_LOGIC_VECTOR (2 downto 0);
    signal k1_reg_865 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal col4_reg_876 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal tmp_46_reg_887 : STD_LOGIC_VECTOR (63 downto 0);
    signal row4_reg_899 : STD_LOGIC_VECTOR (8 downto 0);
    signal i4_reg_911 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state123 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state123 : signal is "none";
    signal storemerge4_reg_922 : STD_LOGIC_VECTOR (63 downto 0);
    signal j3_reg_935 : STD_LOGIC_VECTOR (6 downto 0);
    signal max_index_1_reg_947 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_index_reg_959 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_value_s_reg_971 : STD_LOGIC_VECTOR (63 downto 0);
    signal storemerge5_reg_981 : STD_LOGIC_VECTOR (63 downto 0);
    signal j4_reg_994 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_fu_1101_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_136_cast_fu_1224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_162_cast_fu_1324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_166_cast_fu_1328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_143_cast_fu_1574_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_154_cast_fu_1648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_173_cast_fu_1688_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_1796_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_153_cast_fu_1933_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_198_cast_fu_2106_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_205_cast_fu_2127_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_172_cast_fu_2374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_181_cast_fu_2448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_192_cast_fu_2488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_180_cast_fu_2726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_fu_2742_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_167_cast_fu_2777_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_179_cast_fu_2840_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_fu_2835_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_174_cast_fu_2925_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_191_cast_fu_2992_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_186_cast_fu_3081_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_210_cast_fu_3154_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_value_fu_208 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_value_1_fu_212 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal storemerge_fu_1371_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal storemerge1_fu_2171_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal storemerge2_fu_2885_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal storemerge3_fu_3037_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1006_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1006_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal ap_CS_fsm_state134 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state134 : signal is "none";
    signal ap_CS_fsm_state140 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state140 : signal is "none";
    signal grp_fu_1017_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1017_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal ap_CS_fsm_state128 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state128 : signal is "none";
    signal grp_fu_1021_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1021_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl3_fu_1110_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl4_fu_1120_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl2_fu_1136_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_1164_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_1168_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_1173_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_17_fu_1185_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl5_cast_fu_1177_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl6_cast_fu_1189_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_cast_fu_1215_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_61_fu_1219_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal fil_col_cast_fu_1229_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal fil_row_cast_fu_1255_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_28_fu_1271_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_135_fu_1277_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_30_fu_1288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_138_fu_1292_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_140_fu_1301_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl7_cast_fu_1305_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_139_fu_1297_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_141_fu_1313_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_13_to_int_fu_1332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_1336_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_106_fu_1346_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_39_fu_1362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_1366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl1_fu_1395_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl5_fu_1405_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl8_fu_1421_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl9_fu_1431_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_1467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_fu_1471_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_fu_1476_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_37_fu_1488_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl14_cast_fu_1480_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl15_cast_fu_1492_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_9_fu_1506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_fu_1510_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_fu_1515_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_55_fu_1527_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl12_cast_fu_1519_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl13_cast_fu_1531_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_12_cast_fu_1565_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_101_fu_1569_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal fil_col4_cast_fu_1579_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_26_fu_1595_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_27_fu_1600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_131_fu_1604_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_132_fu_1609_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_133_fu_1621_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl16_cast_fu_1613_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl17_cast_fu_1625_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_25_cast_fu_1639_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_130_fu_1643_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal fil_row5_cast_fu_1658_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_43_fu_1674_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_44_cast_fu_1679_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_150_fu_1683_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal max_value_4_to_int_fu_1693_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_value_16_to_int_fu_1711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_86_fu_1697_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_151_fu_1707_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs2_fu_1735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_1729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_88_fu_1715_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_152_fu_1725_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs3_fu_1753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_1747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_90_fu_1741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_91_fu_1759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_92_fu_1765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_94_fu_1771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl6_fu_1809_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl7_fu_1819_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl10_fu_1835_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl11_fu_1845_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_1873_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_82_fu_1877_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_87_fu_1882_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_89_fu_1894_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl22_cast_fu_1886_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl23_cast_fu_1898_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_24_cast_fu_1924_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_129_fu_1928_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal fil_col8_cast_fu_1938_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_40_fu_1954_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal fil_row9_cast_fu_1968_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_64_fu_1984_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl18_fu_2014_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl19_fu_2024_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_176_fu_2034_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_177_fu_2040_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_78_fu_2010_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl26_cast_fu_2058_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl27_cast_fu_2065_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_180_fu_2072_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_183_fu_2083_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_184_fu_2088_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_185_fu_2093_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl24_cast_fu_2110_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_188_fu_2117_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_189_fu_2122_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_38_to_int_fu_2132_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_77_fu_2136_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_149_fu_2146_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_83_fu_2162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_85_fu_2166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl12_fu_2195_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl13_fu_2205_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl14_fu_2221_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl15_fu_2231_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_2267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_115_fu_2271_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_117_fu_2276_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_123_fu_2288_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl36_cast_fu_2280_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl37_cast_fu_2292_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_23_fu_2306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_125_fu_2310_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_126_fu_2315_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_127_fu_2327_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl34_cast_fu_2319_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl35_cast_fu_2331_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_37_cast_fu_2365_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_148_fu_2369_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal l_cast_fu_2379_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_62_fu_2395_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_63_fu_2400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_162_fu_2404_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_163_fu_2409_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_164_fu_2421_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl38_cast_fu_2413_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl39_cast_fu_2425_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_61_cast_fu_2439_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_161_fu_2443_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal m_cast_fu_2458_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_75_fu_2474_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_76_cast_fu_2479_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_173_fu_2483_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal max_value_10_to_int_fu_2493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_value_18_to_int_fu_2511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_105_fu_2497_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_174_fu_2507_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs6_fu_2535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs6_fu_2529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_107_fu_2515_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_175_fu_2525_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs7_fu_2553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs7_fu_2547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_109_fu_2541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_110_fu_2559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_111_fu_2565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_fu_2571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl16_fu_2602_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl17_fu_2612_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_fu_2644_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_144_fu_2648_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_145_fu_2653_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_146_fu_2665_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl42_cast_fu_2657_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl43_cast_fu_2669_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl_fu_2683_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal j1_cast_fu_2628_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp8_fu_2691_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_57_cast_fu_2717_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_160_fu_2721_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal k1_cast_fu_2701_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp9_fu_2731_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_32_cast_fu_2767_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_143_fu_2771_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_155_fu_2794_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_156_fu_2806_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl44_cast_fu_2802_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl45_cast_fu_2814_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_157_fu_2818_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_158_fu_2824_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_49_to_int_fu_2844_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_95_fu_2848_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_154_fu_2858_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs4_fu_2868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_fu_2862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_97_fu_2874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_99_fu_2880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_cast_fu_2915_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_153_fu_2919_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_168_fu_2942_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_169_fu_2954_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl46_cast_fu_2950_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl47_cast_fu_2962_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_170_fu_2966_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_189_cast_fu_2972_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_171_fu_2976_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_56_to_int_fu_2996_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_100_fu_3000_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_167_fu_3010_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs5_fu_3020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs5_fu_3014_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_102_fu_3026_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_104_fu_3032_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_cast_fu_3071_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_166_fu_3075_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_192_fu_3098_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_193_fu_3110_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl48_cast_fu_3106_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl49_cast_fu_3118_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_194_fu_3122_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_208_cast_fu_3128_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_195_fu_3132_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal max_value_17_to_int_fu_3158_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_value_to_int_fu_3176_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_114_fu_3162_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_190_fu_3172_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs8_fu_3200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs8_fu_3194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_116_fu_3180_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_191_fu_3190_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs9_fu_3218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs9_fu_3212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_118_fu_3206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_119_fu_3224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_120_fu_3230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_122_fu_3236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_3248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_3241_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_value_15_fu_3266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_value_15_fu_3266_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_3280_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_3280_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1021_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (146 downto 0);
    signal grp_fu_3280_p10 : STD_LOGIC_VECTOR (24 downto 0);

    component lenet5_ap2_dadd_6bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lenet5_ap2_dmul_6cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lenet5_ap2_dcmp_6dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenet5_ap2_mac_mueOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (24 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;



begin
    lenet5_ap2_dadd_6bkb_U1 : component lenet5_ap2_dadd_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1006_p0,
        din1 => grp_fu_1006_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1006_p2);

    lenet5_ap2_dmul_6cud_U2 : component lenet5_ap2_dmul_6cud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1017_p0,
        din1 => grp_fu_1017_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1017_p2);

    lenet5_ap2_dcmp_6dEe_U3 : component lenet5_ap2_dcmp_6dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_1021_p0,
        din1 => grp_fu_1021_p1,
        opcode => grp_fu_1021_opcode,
        dout => grp_fu_1021_p2);

    lenet5_ap2_mac_mueOg_U4 : component lenet5_ap2_mac_mueOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 10,
        din2_WIDTH => 25,
        dout_WIDTH => 25)
    port map (
        din0 => grp_fu_3280_p0,
        din1 => grp_fu_3280_p1,
        din2 => tmp_reg_3287,
        dout => grp_fu_3280_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    channel1_reg_568_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (exitcond23_fu_1447_p2 = ap_const_lv1_1))) then 
                channel1_reg_568 <= channel_2_reg_3421;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond25_fu_1089_p2 = ap_const_lv1_1))) then 
                channel1_reg_568 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    channel_reg_486_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond29_fu_1152_p2 = ap_const_lv1_1))) then 
                channel_reg_486 <= channel_1_reg_3295;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                channel_reg_486 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    col2_reg_579_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (exitcond22_fu_1545_p2 = ap_const_lv1_1))) then 
                col2_reg_579 <= col_2_reg_3440;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_const_lv1_0 = exitcond24_fu_1383_p2))) then 
                col2_reg_579 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    col4_reg_876_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state74) and (exitcond8_fu_2590_p2 = ap_const_lv1_1))) then 
                col4_reg_876 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
                col4_reg_876 <= col_4_reg_3833;
            end if; 
        end if;
    end process;

    col6_reg_659_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state41) and (exitcond17_fu_1912_p2 = ap_const_lv1_1))) then 
                col6_reg_659 <= col_3_reg_3547;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                col6_reg_659 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    col_reg_498_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond28_fu_1203_p2 = ap_const_lv1_1))) then 
                col_reg_498 <= col_1_reg_3324;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                col_reg_498 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    fil_col4_reg_602_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) and (exitcond20_fu_1662_p2 = ap_const_lv1_1))) then 
                fil_col4_reg_602 <= fil_col_2_reg_3481;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                fil_col4_reg_602 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    fil_col8_reg_695_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) and (exitcond15_fu_1972_p2 = ap_const_lv1_1))) then 
                fil_col8_reg_695 <= fil_col_3_reg_3573;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state41) and (ap_const_lv1_0 = exitcond17_fu_1912_p2))) then 
                fil_col8_reg_695 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    fil_col_reg_534_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond26_fu_1259_p2 = ap_const_lv1_1))) then 
                fil_col_reg_534 <= fil_col_1_reg_3350;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond28_fu_1203_p2))) then 
                fil_col_reg_534 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    fil_row5_reg_624_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = exitcond21_fu_1583_p2))) then 
                fil_row5_reg_624 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                fil_row5_reg_624 <= fil_row_2_reg_3494;
            end if; 
        end if;
    end process;

    fil_row9_reg_718_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (exitcond14_fu_1998_p2 = ap_const_lv1_1))) then 
                fil_row9_reg_718 <= fil_row_3_reg_3591;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_lv1_0 = exitcond16_fu_1942_p2))) then 
                fil_row9_reg_718 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    fil_row_reg_557_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond27_fu_1233_p2))) then 
                fil_row_reg_557 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                fil_row_reg_557 <= fil_row_1_reg_3368;
            end if; 
        end if;
    end process;

    i1_reg_752_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state66) and (exitcond12_fu_2247_p2 = ap_const_lv1_1))) then 
                i1_reg_752 <= i_2_reg_3683;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state38) and (exitcond19_fu_1784_p2 = ap_const_lv1_1))) then 
                i1_reg_752 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i2_reg_831_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state65) and (exitcond13_fu_2183_p2 = ap_const_lv1_1))) then 
                i2_reg_831 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state75) and (exitcond7_fu_2632_p2 = ap_const_lv1_1))) then 
                i2_reg_831 <= i_3_reg_3784;
            end if; 
        end if;
    end process;

    i4_reg_911_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state78) and (exitcond5_fu_2746_p2 = ap_const_lv1_1))) then 
                i4_reg_911 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
                i4_reg_911 <= i_4_reg_3889;
            end if; 
        end if;
    end process;

    i_reg_647_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond24_fu_1383_p2 = ap_const_lv1_1))) then 
                i_reg_647 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state40) and (exitcond18_fu_1861_p2 = ap_const_lv1_1))) then 
                i_reg_647 <= i_1_reg_3517;
            end if; 
        end if;
    end process;

    j1_reg_854_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state76) and (exitcond6_fu_2705_p2 = ap_const_lv1_1))) then 
                j1_reg_854 <= j_2_reg_3797;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state74) and (ap_const_lv1_0 = exitcond8_fu_2590_p2))) then 
                j1_reg_854 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j3_reg_935_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state115)) then 
                j3_reg_935 <= j_3_reg_3912;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state101) and (ap_const_lv1_0 = exitcond3_fu_2894_p2))) then 
                j3_reg_935 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j4_reg_994_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state138)) then 
                j4_reg_994 <= j_4_reg_3968;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state124) and (ap_const_lv1_0 = exitcond1_fu_3050_p2))) then 
                j4_reg_994 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_reg_763_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state67) and (exitcond11_fu_2345_p2 = ap_const_lv1_1))) then 
                j_reg_763 <= j_1_reg_3702;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state65) and (ap_const_lv1_0 = exitcond13_fu_2183_p2))) then 
                j_reg_763 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k1_reg_865_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state75) and (ap_const_lv1_0 = exitcond7_fu_2632_p2))) then 
                k1_reg_865 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                k1_reg_865 <= k_1_reg_3815;
            end if; 
        end if;
    end process;

    k_reg_774_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state66) and (ap_const_lv1_0 = exitcond12_fu_2247_p2))) then 
                k_reg_774 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state69) and (exitcond10_fu_2383_p2 = ap_const_lv1_1))) then 
                k_reg_774 <= k_2_reg_3725;
            end if; 
        end if;
    end process;

    l_reg_786_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state70) and (exitcond9_fu_2462_p2 = ap_const_lv1_1))) then 
                l_reg_786 <= l_1_reg_3743;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
                l_reg_786 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    m_reg_808_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state69) and (ap_const_lv1_0 = exitcond10_fu_2383_p2))) then 
                m_reg_808 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                m_reg_808 <= m_1_reg_3756;
            end if; 
        end if;
    end process;

    max_index_1_reg_947_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state101) and (exitcond3_fu_2894_p2 = ap_const_lv1_1))) then 
                max_index_1_reg_947 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state147)) then 
                max_index_1_reg_947 <= i_5_reg_3945;
            end if; 
        end if;
    end process;

    max_value_1_fu_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state69) and (exitcond10_fu_2383_p2 = ap_const_lv1_1))) then 
                max_value_1_fu_212 <= max_value_9_reg_797;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state38) and (exitcond19_fu_1784_p2 = ap_const_lv1_1))) then 
                max_value_1_fu_212 <= max_value_load_reg_3413;
            end if; 
        end if;
    end process;

    max_value_3_reg_613_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) and (exitcond20_fu_1662_p2 = ap_const_lv1_1))) then 
                max_value_3_reg_613 <= max_value_4_reg_635;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                max_value_3_reg_613 <= conv_dot_q0;
            end if; 
        end if;
    end process;

    max_value_4_reg_635_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = exitcond21_fu_1583_p2))) then 
                max_value_4_reg_635 <= max_value_3_reg_613;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                max_value_4_reg_635 <= max_value_5_fu_1776_p3;
            end if; 
        end if;
    end process;

    max_value_8_reg_819_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state69) and (ap_const_lv1_0 = exitcond10_fu_2383_p2))) then 
                max_value_8_reg_819 <= max_value_9_reg_797;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                max_value_8_reg_819 <= max_value_11_fu_2576_p3;
            end if; 
        end if;
    end process;

    max_value_9_reg_797_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state70) and (exitcond9_fu_2462_p2 = ap_const_lv1_1))) then 
                max_value_9_reg_797 <= max_value_8_reg_819;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
                max_value_9_reg_797 <= conv_dot_q0;
            end if; 
        end if;
    end process;

    max_value_s_reg_971_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state101) and (exitcond3_fu_2894_p2 = ap_const_lv1_1))) then 
                max_value_s_reg_971 <= max_value_1_load_reg_3675;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state147)) then 
                max_value_s_reg_971 <= max_value_12_fu_3273_p3;
            end if; 
        end if;
    end process;

    n_reg_741_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) and (ap_const_lv1_0 = exitcond15_fu_1972_p2))) then 
                n_reg_741 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                n_reg_741 <= n_1_reg_3609;
            end if; 
        end if;
    end process;

    phi_mul_reg_842_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state65) and (exitcond13_fu_2183_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_842 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state75) and (exitcond7_fu_2632_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_842 <= next_mul_reg_3776;
            end if; 
        end if;
    end process;

    row3_reg_590_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_0 = exitcond23_fu_1447_p2))) then 
                row3_reg_590 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond21_fu_1583_p2 = ap_const_lv1_1))) then 
                row3_reg_590 <= row_2_reg_3463;
            end if; 
        end if;
    end process;

    row4_reg_899_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
                row4_reg_899 <= row_4_reg_3856;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state78) and (ap_const_lv1_0 = exitcond5_fu_2746_p2))) then 
                row4_reg_899 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    row7_reg_671_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_lv1_0 = exitcond18_fu_1861_p2))) then 
                row7_reg_671 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                row7_reg_671 <= row_3_reg_3560;
            end if; 
        end if;
    end process;

    row_reg_510_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond29_fu_1152_p2))) then 
                row_reg_510 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                row_reg_510 <= row_1_reg_3337;
            end if; 
        end if;
    end process;

    storemerge4_reg_922_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state115)) then 
                storemerge4_reg_922 <= grp_fu_1006_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state101) and (ap_const_lv1_0 = exitcond3_fu_2894_p2))) then 
                storemerge4_reg_922 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    storemerge5_reg_981_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state138)) then 
                storemerge5_reg_981 <= grp_fu_1006_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state124) and (ap_const_lv1_0 = exitcond1_fu_3050_p2))) then 
                storemerge5_reg_981 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    tmp_18_reg_545_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond27_fu_1233_p2))) then 
                tmp_18_reg_545 <= tmp_3_reg_522;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                tmp_18_reg_545 <= grp_fu_1006_p2;
            end if; 
        end if;
    end process;

    tmp_31_reg_683_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) and (exitcond15_fu_1972_p2 = ap_const_lv1_1))) then 
                tmp_31_reg_683 <= tmp_50_reg_706;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state41) and (ap_const_lv1_0 = exitcond17_fu_1912_p2))) then 
                tmp_31_reg_683 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    tmp_3_reg_522_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond26_fu_1259_p2 = ap_const_lv1_1))) then 
                tmp_3_reg_522 <= tmp_18_reg_545;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond28_fu_1203_p2))) then 
                tmp_3_reg_522 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    tmp_46_reg_887_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
                tmp_46_reg_887 <= grp_fu_1006_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state78) and (ap_const_lv1_0 = exitcond5_fu_2746_p2))) then 
                tmp_46_reg_887 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    tmp_50_reg_706_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (exitcond14_fu_1998_p2 = ap_const_lv1_1))) then 
                tmp_50_reg_706 <= tmp_68_reg_729;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_lv1_0 = exitcond16_fu_1942_p2))) then 
                tmp_50_reg_706 <= tmp_31_reg_683;
            end if; 
        end if;
    end process;

    tmp_68_reg_729_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) and (ap_const_lv1_0 = exitcond15_fu_1972_p2))) then 
                tmp_68_reg_729 <= tmp_50_reg_706;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                tmp_68_reg_729 <= grp_fu_1006_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                channel_1_reg_3295 <= channel_1_fu_1095_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                channel_2_reg_3421 <= channel_2_fu_1389_p2;
                max_value_load_reg_3413 <= max_value_fu_208;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                col_1_reg_3324 <= col_1_fu_1158_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                col_2_reg_3440 <= col_2_fu_1453_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                col_3_reg_3547 <= col_3_fu_1867_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                col_4_reg_3833 <= col_4_fu_2752_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state41) and (ap_const_lv1_0 = exitcond17_fu_1912_p2))) then
                conv_dot_addr_2_reg_3565 <= tmp_153_cast_fu_1933_p1(16 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond28_fu_1203_p2))) then
                conv_dot_addr_reg_3342 <= tmp_136_cast_fu_1224_p1(16 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state101) and (ap_const_lv1_0 = exitcond3_fu_2894_p2))) then
                fc_bias_addr_1_reg_3899 <= tmp_174_cast_fu_2925_p1(9 - 1 downto 0);
                    tmp_33_cast1_reg_3894(6 downto 0) <= tmp_33_cast1_fu_2911_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state124) and (ap_const_lv1_0 = exitcond1_fu_3050_p2))) then
                fc_bias_addr_2_reg_3955 <= tmp_186_cast_fu_3081_p1(9 - 1 downto 0);
                    tmp_47_cast1_reg_3950(3 downto 0) <= tmp_47_cast1_fu_3067_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state78) and (ap_const_lv1_0 = exitcond5_fu_2746_p2))) then
                    fc_bias_addr_reg_3843(7 downto 0) <= tmp_167_cast_fu_2777_p1(9 - 1 downto 0)(7 downto 0);
                    tmp_32_cast1_reg_3838(6 downto 0) <= tmp_32_cast1_fu_2763_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then
                fc_in_load_reg_3876 <= fc_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                fil_col_1_reg_3350 <= fil_col_1_fu_1239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                fil_col_2_reg_3481 <= fil_col_2_fu_1589_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                fil_col_3_reg_3573 <= fil_col_3_fu_1948_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                fil_row_1_reg_3368 <= fil_row_1_fu_1265_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                fil_row_2_reg_3494 <= fil_row_2_fu_1668_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                fil_row_3_reg_3591 <= fil_row_3_fu_1978_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                i_1_reg_3517 <= i_1_fu_1790_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                i_2_reg_3683 <= i_2_fu_2189_p2;
                max_value_1_load_reg_3675 <= max_value_1_fu_212;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                i_3_reg_3784 <= i_3_fu_2596_p2;
                next_mul_reg_3776 <= next_mul_fu_2584_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state101)) then
                i_4_reg_3889 <= i_4_fu_2900_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state124)) then
                i_5_reg_3945 <= i_5_fu_3056_p2;
                    max_index_1_cast_reg_3937(3 downto 0) <= max_index_1_cast_fu_3046_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                in_load_reg_3393 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                j_1_reg_3702 <= j_1_fu_2253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then
                j_2_reg_3797 <= j_2_fu_2638_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state102)) then
                j_3_reg_3912 <= j_3_fu_2936_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state125)) then
                j_4_reg_3968 <= j_4_fu_3092_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then
                k_1_reg_3815 <= k_1_fu_2711_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then
                k_2_reg_3725 <= k_2_fu_2351_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                l_1_reg_3743 <= l_1_fu_2389_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then
                m_1_reg_3756 <= m_1_fu_2468_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state146)) then
                max_index_2_reg_4005 <= max_index_2_fu_3259_p3;
                sel_tmp2_reg_4000 <= sel_tmp2_fu_3253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state147)) then
                max_index_reg_959 <= max_index_2_reg_4005;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond21_fu_1583_p2 = ap_const_lv1_1))) then
                max_value_fu_208 <= max_value_3_reg_613;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                n_1_reg_3609 <= n_1_fu_2004_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                notlhs1_reg_3660 <= notlhs1_fu_2150_p2;
                notrhs1_reg_3665 <= notrhs1_fu_2156_p2;
                tmp_84_reg_3670 <= grp_fu_1021_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                notlhs_reg_3398 <= notlhs_fu_1350_p2;
                notrhs_reg_3403 <= notrhs_fu_1356_p2;
                tmp_45_reg_3408 <= grp_fu_1021_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                pool_dot_load_1_reg_3655 <= pool_dot_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state39))) then
                reg_1029 <= conv_bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state47))) then
                reg_1034 <= conv_weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state133))) then
                reg_1039 <= grp_fu_1017_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state144))) then
                reg_1053 <= grp_fu_1006_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state71))) then
                reg_1065 <= conv_dot_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state127))) then
                reg_1070 <= fc_weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state139))) then
                reg_1075 <= fc_bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state127))) then
                reg_1080 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fc_dot_q0),64));
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                row_1_reg_3337 <= row_1_fu_1209_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                row_2_reg_3463 <= row_2_fu_1551_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                row_3_reg_3560 <= row_3_fu_1918_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
                row_4_reg_3856 <= row_4_fu_2788_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state75) and (ap_const_lv1_0 = exitcond7_fu_2632_p2))) then
                    tmp8_cast_reg_3807(4 downto 0) <= tmp8_cast_fu_2697_p1(4 downto 0);
                    tmp_147_reg_3802(14 downto 1) <= tmp_147_fu_2677_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state122)) then
                tmp_103_reg_3932 <= grp_fu_1021_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state74) and (ap_const_lv1_0 = exitcond8_fu_2590_p2))) then
                    tmp_108_reg_3789(63 downto 1) <= tmp_108_fu_2622_p2(63 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then
                tmp_112_reg_3766 <= grp_fu_1021_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_lv1_0 = exitcond22_fu_1545_p2))) then
                    tmp_11_reg_3468(4 downto 1) <= tmp_11_fu_1557_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state145)) then
                tmp_121_reg_3995 <= grp_fu_1021_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state66) and (ap_const_lv1_0 = exitcond12_fu_2247_p2))) then
                    tmp_124_reg_3712(16 downto 3) <= tmp_124_fu_2300_p2(16 downto 3);
                    tmp_128_reg_3717(14 downto 1) <= tmp_128_fu_2339_p2(14 downto 1);
                    tmp_21_reg_3707(3 downto 1) <= tmp_21_fu_2259_p3(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = exitcond21_fu_1583_p2))) then
                    tmp_134_reg_3486(16 downto 2) <= tmp_134_fu_1633_p2(16 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond26_fu_1259_p2))) then
                tmp_137_reg_3373 <= grp_fu_3280_p3;
                tmp_142_reg_3378 <= tmp_142_fu_1319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state79) and (ap_const_lv1_0 = exitcond4_fu_2782_p2))) then
                tmp_159_reg_3861 <= tmp_159_fu_2830_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond27_fu_1233_p2))) then
                tmp_15_reg_3355 <= tmp_15_fu_1245_p2;
                    tmp_17_cast_reg_3360(2 downto 0) <= tmp_17_cast_fu_1251_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state69) and (ap_const_lv1_0 = exitcond10_fu_2383_p2))) then
                    tmp_165_reg_3748(16 downto 2) <= tmp_165_fu_2433_p2(16 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state102) and (ap_const_lv1_0 = exitcond2_fu_2930_p2))) then
                tmp_172_reg_3917 <= tmp_172_fu_2982_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_lv1_0 = exitcond14_fu_1998_p2))) then
                tmp_178_reg_3614 <= tmp_178_fu_2045_p1;
                tmp_179_reg_3619 <= tmp_179_fu_2049_p1;
                tmp_182_reg_3624 <= tmp_182_fu_2053_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                tmp_181_reg_3630 <= tmp_181_fu_2078_p2;
                tmp_186_reg_3635 <= tmp_186_fu_2098_p1;
                tmp_187_reg_3640 <= tmp_187_fu_2102_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state125) and (ap_const_lv1_0 = exitcond_fu_3086_p2))) then
                tmp_196_reg_3973 <= tmp_196_fu_3138_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond29_fu_1152_p2))) then
                    tmp_19_reg_3329(16 downto 2) <= tmp_19_fu_1197_p2(16 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                    tmp_24_reg_3534(63 downto 2) <= tmp_24_fu_1829_p2(63 downto 2);
                    tmp_25_reg_3539(63 downto 1) <= tmp_25_fu_1855_p2(63 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_2_reg_3311(63 downto 2) <= tmp_2_fu_1130_p2(63 downto 2);
                    tmp_5_reg_3316(63 downto 1) <= tmp_5_fu_1146_p2(63 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state67) and (ap_const_lv1_0 = exitcond11_fu_2345_p2))) then
                    tmp_36_reg_3730(3 downto 1) <= tmp_36_fu_2357_p3(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_lv1_0 = exitcond16_fu_1942_p2))) then
                    tmp_41_reg_3578(3 downto 0) <= tmp_41_fu_1960_p1(3 downto 0);
                    tmp_42_cast_reg_3583(2 downto 0) <= tmp_42_cast_fu_1964_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_0 = exitcond23_fu_1447_p2))) then
                    tmp_42_reg_3450(16 downto 3) <= tmp_42_fu_1500_p2(16 downto 3);
                    tmp_57_reg_3455(14 downto 1) <= tmp_57_fu_1539_p2(14 downto 1);
                    tmp_7_reg_3445(4 downto 1) <= tmp_7_fu_1459_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state76) and (ap_const_lv1_0 = exitcond6_fu_2705_p2))) then
                tmp_59_reg_3825 <= tmp_59_fu_2737_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) and (ap_const_lv1_0 = exitcond15_fu_1972_p2))) then
                    tmp_65_cast_reg_3596(3 downto 0) <= tmp_65_cast_fu_1990_p1(3 downto 0);
                    tmp_66_reg_3601(2 downto 0) <= tmp_66_fu_1994_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state65) and (ap_const_lv1_0 = exitcond13_fu_2183_p2))) then
                    tmp_65_reg_3688(63 downto 1) <= tmp_65_fu_2215_p2(63 downto 1);
                    tmp_76_reg_3693(63 downto 2) <= tmp_76_fu_2241_p2(63 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_const_lv1_0 = exitcond24_fu_1383_p2))) then
                    tmp_6_reg_3426(63 downto 1) <= tmp_6_fu_1415_p2(63 downto 1);
                    tmp_s_reg_3431(63 downto 2) <= tmp_s_fu_1441_p2(63 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state125) and (exitcond_fu_3086_p2 = ap_const_lv1_1))) then
                tmp_72_reg_3978 <= tmp_72_fu_3143_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                tmp_93_reg_3504 <= grp_fu_1021_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_lv1_0 = exitcond18_fu_1861_p2))) then
                    tmp_96_reg_3552(16 downto 2) <= tmp_96_fu_1906_p2(16 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state99)) then
                tmp_98_reg_3881 <= grp_fu_1021_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_reg_3287 <= tmp_fu_1085_p1;
            end if;
        end if;
    end process;
    tmp_2_reg_3311(1 downto 0) <= "00";
    tmp_5_reg_3316(0) <= '0';
    tmp_19_reg_3329(1 downto 0) <= "00";
    tmp_17_cast_reg_3360(13 downto 3) <= "00000000000";
    tmp_6_reg_3426(0) <= '0';
    tmp_s_reg_3431(1 downto 0) <= "00";
    tmp_7_reg_3445(0) <= '0';
    tmp_42_reg_3450(2 downto 0) <= "000";
    tmp_57_reg_3455(0) <= '0';
    tmp_11_reg_3468(0) <= '0';
    tmp_134_reg_3486(1 downto 0) <= "00";
    tmp_24_reg_3534(1 downto 0) <= "00";
    tmp_25_reg_3539(0) <= '0';
    tmp_96_reg_3552(1 downto 0) <= "00";
    tmp_41_reg_3578(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_42_cast_reg_3583(13 downto 3) <= "00000000000";
    tmp_65_cast_reg_3596(14 downto 4) <= "00000000000";
    tmp_66_reg_3601(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    tmp_65_reg_3688(0) <= '0';
    tmp_76_reg_3693(1 downto 0) <= "00";
    tmp_21_reg_3707(0) <= '0';
    tmp_124_reg_3712(2 downto 0) <= "000";
    tmp_128_reg_3717(0) <= '0';
    tmp_36_reg_3730(0) <= '0';
    tmp_165_reg_3748(1 downto 0) <= "00";
    tmp_108_reg_3789(0) <= '0';
    tmp_147_reg_3802(0) <= '0';
    tmp8_cast_reg_3807(8 downto 5) <= "0000";
    tmp_32_cast1_reg_3838(16 downto 7) <= "0000000000";
    fc_bias_addr_reg_3843(8) <= '0';
    tmp_33_cast1_reg_3894(16 downto 7) <= "0000000000";
    max_index_1_cast_reg_3937(31 downto 4) <= "0000000000000000000000000000";
    tmp_47_cast1_reg_3950(17 downto 4) <= "00000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond25_fu_1089_p2, ap_CS_fsm_state4, exitcond29_fu_1152_p2, ap_CS_fsm_state5, exitcond28_fu_1203_p2, ap_CS_fsm_state6, exitcond27_fu_1233_p2, ap_CS_fsm_state7, exitcond26_fu_1259_p2, ap_CS_fsm_state29, exitcond24_fu_1383_p2, ap_CS_fsm_state30, exitcond23_fu_1447_p2, ap_CS_fsm_state31, exitcond22_fu_1545_p2, ap_CS_fsm_state33, exitcond21_fu_1583_p2, ap_CS_fsm_state34, exitcond20_fu_1662_p2, ap_CS_fsm_state38, exitcond19_fu_1784_p2, ap_CS_fsm_state40, exitcond18_fu_1861_p2, ap_CS_fsm_state41, exitcond17_fu_1912_p2, ap_CS_fsm_state42, exitcond16_fu_1942_p2, ap_CS_fsm_state43, exitcond15_fu_1972_p2, ap_CS_fsm_state44, exitcond14_fu_1998_p2, ap_CS_fsm_state65, exitcond13_fu_2183_p2, ap_CS_fsm_state66, exitcond12_fu_2247_p2, ap_CS_fsm_state67, exitcond11_fu_2345_p2, ap_CS_fsm_state69, exitcond10_fu_2383_p2, ap_CS_fsm_state70, exitcond9_fu_2462_p2, ap_CS_fsm_state74, exitcond8_fu_2590_p2, ap_CS_fsm_state75, exitcond7_fu_2632_p2, ap_CS_fsm_state76, exitcond6_fu_2705_p2, ap_CS_fsm_state78, exitcond5_fu_2746_p2, ap_CS_fsm_state79, exitcond4_fu_2782_p2, ap_CS_fsm_state101, exitcond3_fu_2894_p2, ap_CS_fsm_state102, exitcond2_fu_2930_p2, ap_CS_fsm_state124, exitcond1_fu_3050_p2, ap_CS_fsm_state125, exitcond_fu_3086_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond25_fu_1089_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond29_fu_1152_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond28_fu_1203_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond27_fu_1233_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond26_fu_1259_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond24_fu_1383_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (exitcond23_fu_1447_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (exitcond22_fu_1545_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond21_fu_1583_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (exitcond20_fu_1662_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (exitcond19_fu_1784_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (exitcond18_fu_1861_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state41 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state41) and (exitcond17_fu_1912_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state42 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_lv1_0 = exitcond16_fu_1942_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (exitcond15_fu_1972_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (exitcond14_fu_1998_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state65 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state65) and (exitcond13_fu_2183_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state66 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state66) and (exitcond12_fu_2247_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state67 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state67) and (exitcond11_fu_2345_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state69) and (exitcond10_fu_2383_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state70 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state70) and (exitcond9_fu_2462_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state74 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state74) and (exitcond8_fu_2590_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when ap_ST_fsm_state75 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state75) and (exitcond7_fu_2632_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state76 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state76) and (exitcond6_fu_2705_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state77;
                end if;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state78 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state78) and (exitcond5_fu_2746_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state101;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_state79 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state79) and (exitcond4_fu_2782_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state93;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state101 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state101) and (exitcond3_fu_2894_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state124;
                else
                    ap_NS_fsm <= ap_ST_fsm_state102;
                end if;
            when ap_ST_fsm_state102 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state102) and (exitcond2_fu_2930_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state116;
                else
                    ap_NS_fsm <= ap_ST_fsm_state103;
                end if;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state124 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state124) and (exitcond1_fu_3050_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state125;
                end if;
            when ap_ST_fsm_state125 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state125) and (exitcond_fu_3086_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state139;
                else
                    ap_NS_fsm <= ap_ST_fsm_state126;
                end if;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state133;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state136;
            when ap_ST_fsm_state136 => 
                ap_NS_fsm <= ap_ST_fsm_state137;
            when ap_ST_fsm_state137 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state138 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                ap_NS_fsm <= ap_ST_fsm_state141;
            when ap_ST_fsm_state141 => 
                ap_NS_fsm <= ap_ST_fsm_state142;
            when ap_ST_fsm_state142 => 
                ap_NS_fsm <= ap_ST_fsm_state143;
            when ap_ST_fsm_state143 => 
                ap_NS_fsm <= ap_ST_fsm_state144;
            when ap_ST_fsm_state144 => 
                ap_NS_fsm <= ap_ST_fsm_state145;
            when ap_ST_fsm_state145 => 
                ap_NS_fsm <= ap_ST_fsm_state146;
            when ap_ST_fsm_state146 => 
                ap_NS_fsm <= ap_ST_fsm_state147;
            when ap_ST_fsm_state147 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state110 <= ap_CS_fsm(109);
    ap_CS_fsm_state111 <= ap_CS_fsm(110);
    ap_CS_fsm_state115 <= ap_CS_fsm(114);
    ap_CS_fsm_state116 <= ap_CS_fsm(115);
    ap_CS_fsm_state117 <= ap_CS_fsm(116);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state121 <= ap_CS_fsm(120);
    ap_CS_fsm_state122 <= ap_CS_fsm(121);
    ap_CS_fsm_state123 <= ap_CS_fsm(122);
    ap_CS_fsm_state124 <= ap_CS_fsm(123);
    ap_CS_fsm_state125 <= ap_CS_fsm(124);
    ap_CS_fsm_state126 <= ap_CS_fsm(125);
    ap_CS_fsm_state127 <= ap_CS_fsm(126);
    ap_CS_fsm_state128 <= ap_CS_fsm(127);
    ap_CS_fsm_state133 <= ap_CS_fsm(132);
    ap_CS_fsm_state134 <= ap_CS_fsm(133);
    ap_CS_fsm_state138 <= ap_CS_fsm(137);
    ap_CS_fsm_state139 <= ap_CS_fsm(138);
    ap_CS_fsm_state140 <= ap_CS_fsm(139);
    ap_CS_fsm_state144 <= ap_CS_fsm(143);
    ap_CS_fsm_state145 <= ap_CS_fsm(144);
    ap_CS_fsm_state146 <= ap_CS_fsm(145);
    ap_CS_fsm_state147 <= ap_CS_fsm(146);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);

    ap_done_assign_proc : process(ap_CS_fsm_state124, exitcond1_fu_3050_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state124) and (exitcond1_fu_3050_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state124, exitcond1_fu_3050_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state124) and (exitcond1_fu_3050_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= max_index_reg_959;
    channel_1_fu_1095_p2 <= std_logic_vector(unsigned(channel_reg_486) + unsigned(ap_const_lv3_1));
    channel_2_fu_1389_p2 <= std_logic_vector(unsigned(channel1_reg_568) + unsigned(ap_const_lv3_1));
    col_1_fu_1158_p2 <= std_logic_vector(unsigned(col_reg_498) + unsigned(ap_const_lv5_1));
    col_2_fu_1453_p2 <= std_logic_vector(unsigned(col2_reg_579) + unsigned(ap_const_lv4_1));
    col_3_fu_1867_p2 <= std_logic_vector(unsigned(col6_reg_659) + unsigned(ap_const_lv4_1));
    col_4_fu_2752_p2 <= std_logic_vector(unsigned(col4_reg_876) + unsigned(ap_const_lv7_1));

    conv_bias_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state38, tmp_1_fu_1101_p3, tmp_20_fu_1796_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            conv_bias_address0 <= tmp_20_fu_1796_p3(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_bias_address0 <= tmp_1_fu_1101_p3(6 - 1 downto 0);
        else 
            conv_bias_address0 <= "XXXXXX";
        end if; 
    end process;


    conv_bias_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            conv_bias_ce0 <= ap_const_logic_1;
        else 
            conv_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_dot_address0_assign_proc : process(conv_dot_addr_reg_3342, ap_CS_fsm_state31, ap_CS_fsm_state34, conv_dot_addr_2_reg_3565, ap_CS_fsm_state67, ap_CS_fsm_state70, ap_CS_fsm_state28, ap_CS_fsm_state64, tmp_143_cast_fu_1574_p1, tmp_173_cast_fu_1688_p1, tmp_172_cast_fu_2374_p1, tmp_192_cast_fu_2488_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            conv_dot_address0 <= tmp_192_cast_fu_2488_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            conv_dot_address0 <= tmp_172_cast_fu_2374_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            conv_dot_address0 <= conv_dot_addr_2_reg_3565;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            conv_dot_address0 <= tmp_173_cast_fu_1688_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            conv_dot_address0 <= tmp_143_cast_fu_1574_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            conv_dot_address0 <= conv_dot_addr_reg_3342;
        else 
            conv_dot_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_dot_ce0_assign_proc : process(ap_CS_fsm_state31, ap_CS_fsm_state34, ap_CS_fsm_state67, ap_CS_fsm_state70, ap_CS_fsm_state28, ap_CS_fsm_state64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            conv_dot_ce0 <= ap_const_logic_1;
        else 
            conv_dot_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_dot_d0_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state64, storemerge_fu_1371_p3, storemerge1_fu_2171_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            conv_dot_d0 <= storemerge1_fu_2171_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            conv_dot_d0 <= storemerge_fu_1371_p3;
        else 
            conv_dot_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_dot_we0_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            conv_dot_we0 <= ap_const_logic_1;
        else 
            conv_dot_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_weight_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state46, tmp_166_cast_fu_1328_p1, tmp_205_cast_fu_2127_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            conv_weight_address0 <= tmp_205_cast_fu_2127_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_weight_address0 <= tmp_166_cast_fu_1328_p1(13 - 1 downto 0);
        else 
            conv_weight_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    conv_weight_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            conv_weight_ce0 <= ap_const_logic_1;
        else 
            conv_weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond10_fu_2383_p2 <= "1" when (l_reg_786 = ap_const_lv2_2) else "0";
    exitcond11_fu_2345_p2 <= "1" when (k_reg_774 = ap_const_lv3_5) else "0";
    exitcond12_fu_2247_p2 <= "1" when (j_reg_763 = ap_const_lv3_5) else "0";
    exitcond13_fu_2183_p2 <= "1" when (i1_reg_752 = ap_const_lv5_10) else "0";
    exitcond14_fu_1998_p2 <= "1" when (n_reg_741 = ap_const_lv3_6) else "0";
    exitcond15_fu_1972_p2 <= "1" when (fil_row9_reg_718 = ap_const_lv3_5) else "0";
    exitcond16_fu_1942_p2 <= "1" when (fil_col8_reg_695 = ap_const_lv3_5) else "0";
    exitcond17_fu_1912_p2 <= "1" when (row7_reg_671 = ap_const_lv4_A) else "0";
    exitcond18_fu_1861_p2 <= "1" when (col6_reg_659 = ap_const_lv4_A) else "0";
    exitcond19_fu_1784_p2 <= "1" when (i_reg_647 = ap_const_lv5_10) else "0";
    exitcond1_fu_3050_p2 <= "1" when (max_index_1_reg_947 = ap_const_lv4_A) else "0";
    exitcond20_fu_1662_p2 <= "1" when (fil_row5_reg_624 = ap_const_lv2_2) else "0";
    exitcond21_fu_1583_p2 <= "1" when (fil_col4_reg_602 = ap_const_lv2_2) else "0";
    exitcond22_fu_1545_p2 <= "1" when (row3_reg_590 = ap_const_lv4_E) else "0";
    exitcond23_fu_1447_p2 <= "1" when (col2_reg_579 = ap_const_lv4_E) else "0";
    exitcond24_fu_1383_p2 <= "1" when (channel1_reg_568 = ap_const_lv3_6) else "0";
    exitcond25_fu_1089_p2 <= "1" when (channel_reg_486 = ap_const_lv3_6) else "0";
    exitcond26_fu_1259_p2 <= "1" when (fil_row_reg_557 = ap_const_lv3_5) else "0";
    exitcond27_fu_1233_p2 <= "1" when (fil_col_reg_534 = ap_const_lv3_5) else "0";
    exitcond28_fu_1203_p2 <= "1" when (row_reg_510 = ap_const_lv5_1C) else "0";
    exitcond29_fu_1152_p2 <= "1" when (col_reg_498 = ap_const_lv5_1C) else "0";
    exitcond2_fu_2930_p2 <= "1" when (j3_reg_935 = ap_const_lv7_78) else "0";
    exitcond3_fu_2894_p2 <= "1" when (i4_reg_911 = ap_const_lv7_54) else "0";
    exitcond4_fu_2782_p2 <= "1" when (row4_reg_899 = ap_const_lv9_190) else "0";
    exitcond5_fu_2746_p2 <= "1" when (col4_reg_876 = ap_const_lv7_78) else "0";
    exitcond6_fu_2705_p2 <= "1" when (k1_reg_865 = ap_const_lv3_5) else "0";
    exitcond7_fu_2632_p2 <= "1" when (j1_reg_854 = ap_const_lv3_5) else "0";
    exitcond8_fu_2590_p2 <= "1" when (i2_reg_831 = ap_const_lv5_10) else "0";
    exitcond9_fu_2462_p2 <= "1" when (m_reg_808 = ap_const_lv2_2) else "0";
    exitcond_fu_3086_p2 <= "1" when (j4_reg_994 = ap_const_lv7_54) else "0";

    fc_bias_address0_assign_proc : process(fc_bias_addr_reg_3843, ap_CS_fsm_state79, fc_bias_addr_1_reg_3899, ap_CS_fsm_state102, fc_bias_addr_2_reg_3955, ap_CS_fsm_state125)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
            fc_bias_address0 <= fc_bias_addr_2_reg_3955;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            fc_bias_address0 <= fc_bias_addr_1_reg_3899;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            fc_bias_address0 <= fc_bias_addr_reg_3843;
        else 
            fc_bias_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    fc_bias_ce0_assign_proc : process(ap_CS_fsm_state79, ap_CS_fsm_state102, ap_CS_fsm_state125)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state125))) then 
            fc_bias_ce0 <= ap_const_logic_1;
        else 
            fc_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_dot_addr_1_reg_3904 <= ap_const_lv64_2(2 - 1 downto 0);
    fc_dot_addr_reg_3848 <= ap_const_lv64_1(2 - 1 downto 0);

    fc_dot_address0_assign_proc : process(fc_dot_addr_reg_3848, fc_dot_addr_1_reg_3904, ap_CS_fsm_state102, ap_CS_fsm_state103, ap_CS_fsm_state125, ap_CS_fsm_state126, ap_CS_fsm_state145, ap_CS_fsm_state146, ap_CS_fsm_state100, ap_CS_fsm_state123)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state146)) then 
            fc_dot_address0 <= ap_const_lv2_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state126)) then 
            fc_dot_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state145))) then 
            fc_dot_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            fc_dot_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state123))) then 
            fc_dot_address0 <= fc_dot_addr_1_reg_3904;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            fc_dot_address0 <= fc_dot_addr_reg_3848;
        else 
            fc_dot_address0 <= "XX";
        end if; 
    end process;


    fc_dot_ce0_assign_proc : process(ap_CS_fsm_state102, ap_CS_fsm_state103, ap_CS_fsm_state125, ap_CS_fsm_state126, ap_CS_fsm_state145, ap_CS_fsm_state146, ap_CS_fsm_state100, ap_CS_fsm_state123)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state145) or (ap_const_logic_1 = ap_CS_fsm_state146) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state123))) then 
            fc_dot_ce0 <= ap_const_logic_1;
        else 
            fc_dot_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_dot_d0_assign_proc : process(reg_1053, ap_CS_fsm_state102, ap_CS_fsm_state125, ap_CS_fsm_state145, ap_CS_fsm_state100, ap_CS_fsm_state123, storemerge4_reg_922, storemerge5_reg_981, storemerge2_fu_2885_p3, storemerge3_fu_3037_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state145)) then 
            fc_dot_d0 <= reg_1053(0 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
            fc_dot_d0 <= storemerge5_reg_981(0 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
            fc_dot_d0 <= storemerge3_fu_3037_p3(0 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            fc_dot_d0 <= storemerge4_reg_922(0 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            fc_dot_d0 <= storemerge2_fu_2885_p3(0 - 1 downto 0);
        else 
            fc_dot_d0 <= "";
        end if; 
    end process;


    fc_dot_we0_assign_proc : process(ap_CS_fsm_state102, ap_CS_fsm_state125, ap_CS_fsm_state145, ap_CS_fsm_state100, ap_CS_fsm_state123)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state145) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state123))) then 
            fc_dot_we0 <= ap_const_logic_1;
        else 
            fc_dot_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_in_address0_assign_proc : process(ap_CS_fsm_state80, ap_CS_fsm_state77, tmp_60_fu_2742_p1, tmp_52_fu_2835_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            fc_in_address0 <= tmp_52_fu_2835_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            fc_in_address0 <= tmp_60_fu_2742_p1(9 - 1 downto 0);
        else 
            fc_in_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    fc_in_ce0_assign_proc : process(ap_CS_fsm_state80, ap_CS_fsm_state77)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state77))) then 
            fc_in_ce0 <= ap_const_logic_1;
        else 
            fc_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fc_in_d0 <= pool_dot_q0;

    fc_in_we0_assign_proc : process(ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            fc_in_we0 <= ap_const_logic_1;
        else 
            fc_in_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_weight_address0_assign_proc : process(ap_CS_fsm_state80, ap_CS_fsm_state103, ap_CS_fsm_state126, tmp_179_cast_fu_2840_p1, tmp_191_cast_fu_2992_p1, tmp_210_cast_fu_3154_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state126)) then 
            fc_weight_address0 <= tmp_210_cast_fu_3154_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            fc_weight_address0 <= tmp_191_cast_fu_2992_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            fc_weight_address0 <= tmp_179_cast_fu_2840_p1(18 - 1 downto 0);
        else 
            fc_weight_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fc_weight_ce0_assign_proc : process(ap_CS_fsm_state80, ap_CS_fsm_state103, ap_CS_fsm_state126)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state126))) then 
            fc_weight_ce0 <= ap_const_logic_1;
        else 
            fc_weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fil_col4_cast_fu_1579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fil_col4_reg_602),5));
    fil_col8_cast_fu_1938_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fil_col8_reg_695),4));
    fil_col_1_fu_1239_p2 <= std_logic_vector(unsigned(fil_col_reg_534) + unsigned(ap_const_lv3_1));
    fil_col_2_fu_1589_p2 <= std_logic_vector(unsigned(fil_col4_reg_602) + unsigned(ap_const_lv2_1));
    fil_col_3_fu_1948_p2 <= std_logic_vector(unsigned(fil_col8_reg_695) + unsigned(ap_const_lv3_1));
    fil_col_cast_fu_1229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fil_col_reg_534),5));
    fil_row5_cast_fu_1658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fil_row5_reg_624),5));
    fil_row9_cast_fu_1968_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fil_row9_reg_718),4));
    fil_row_1_fu_1265_p2 <= std_logic_vector(unsigned(fil_row_reg_557) + unsigned(ap_const_lv3_1));
    fil_row_2_fu_1668_p2 <= std_logic_vector(unsigned(fil_row5_reg_624) + unsigned(ap_const_lv2_1));
    fil_row_3_fu_1978_p2 <= std_logic_vector(unsigned(fil_row9_reg_718) + unsigned(ap_const_lv3_1));
    fil_row_cast_fu_1255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fil_row_reg_557),5));

    grp_fu_1006_p0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state42, tmp_3_reg_522, tmp_18_reg_545, tmp_31_reg_683, tmp_68_reg_729, tmp_46_reg_887, storemerge4_reg_922, storemerge5_reg_981, ap_CS_fsm_state18, ap_CS_fsm_state54, ap_CS_fsm_state88, ap_CS_fsm_state94, ap_CS_fsm_state111, ap_CS_fsm_state117, ap_CS_fsm_state134, ap_CS_fsm_state140)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state134) or (ap_const_logic_1 = ap_CS_fsm_state140))) then 
            grp_fu_1006_p0 <= storemerge5_reg_981;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state117))) then 
            grp_fu_1006_p0 <= storemerge4_reg_922;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state94))) then 
            grp_fu_1006_p0 <= tmp_46_reg_887;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_1006_p0 <= tmp_68_reg_729;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_1006_p0 <= tmp_31_reg_683;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_1006_p0 <= tmp_18_reg_545;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_1006_p0 <= tmp_3_reg_522;
        else 
            grp_fu_1006_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1006_p1_assign_proc : process(reg_1029, reg_1039, reg_1075, ap_CS_fsm_state6, ap_CS_fsm_state42, ap_CS_fsm_state18, ap_CS_fsm_state54, ap_CS_fsm_state88, ap_CS_fsm_state94, ap_CS_fsm_state111, ap_CS_fsm_state117, ap_CS_fsm_state134, ap_CS_fsm_state140)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state140))) then 
            grp_fu_1006_p1 <= reg_1075;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state134))) then 
            grp_fu_1006_p1 <= reg_1039;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            grp_fu_1006_p1 <= reg_1029;
        else 
            grp_fu_1006_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1017_p0_assign_proc : process(reg_1080, in_load_reg_3393, pool_dot_load_1_reg_3655, fc_in_load_reg_3876, ap_CS_fsm_state12, ap_CS_fsm_state48, ap_CS_fsm_state82, ap_CS_fsm_state105, ap_CS_fsm_state128)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state128))) then 
            grp_fu_1017_p0 <= reg_1080;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            grp_fu_1017_p0 <= fc_in_load_reg_3876;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_1017_p0 <= pool_dot_load_1_reg_3655;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_1017_p0 <= in_load_reg_3393;
        else 
            grp_fu_1017_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1017_p1_assign_proc : process(reg_1034, reg_1070, ap_CS_fsm_state12, ap_CS_fsm_state48, ap_CS_fsm_state82, ap_CS_fsm_state105, ap_CS_fsm_state128)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state128))) then 
            grp_fu_1017_p1 <= reg_1070;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            grp_fu_1017_p1 <= reg_1034;
        else 
            grp_fu_1017_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1021_opcode_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state36, ap_CS_fsm_state63, ap_CS_fsm_state72, ap_CS_fsm_state99, ap_CS_fsm_state122, ap_CS_fsm_state145)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state145)) then 
            grp_fu_1021_opcode <= ap_const_lv5_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state122))) then 
            grp_fu_1021_opcode <= ap_const_lv5_4;
        else 
            grp_fu_1021_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_1021_p0_assign_proc : process(reg_1053, ap_CS_fsm_state27, ap_CS_fsm_state36, ap_CS_fsm_state63, ap_CS_fsm_state72, ap_CS_fsm_state99, ap_CS_fsm_state122, ap_CS_fsm_state145, max_value_4_reg_635, max_value_8_reg_819)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            grp_fu_1021_p0 <= max_value_8_reg_819;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_1021_p0 <= max_value_4_reg_635;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state145))) then 
            grp_fu_1021_p0 <= reg_1053;
        else 
            grp_fu_1021_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1021_p1_assign_proc : process(reg_1065, ap_CS_fsm_state27, ap_CS_fsm_state36, ap_CS_fsm_state63, ap_CS_fsm_state72, ap_CS_fsm_state99, ap_CS_fsm_state122, ap_CS_fsm_state145, max_value_s_reg_971)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state145)) then 
            grp_fu_1021_p1 <= max_value_s_reg_971;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state72))) then 
            grp_fu_1021_p1 <= reg_1065;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state122))) then 
            grp_fu_1021_p1 <= ap_const_lv64_0;
        else 
            grp_fu_1021_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_3280_p0 <= ap_const_lv25_2710(15 - 1 downto 0);
    grp_fu_3280_p1 <= grp_fu_3280_p10(10 - 1 downto 0);
    grp_fu_3280_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_135_fu_1277_p3),25));
    i_1_fu_1790_p2 <= std_logic_vector(unsigned(i_reg_647) + unsigned(ap_const_lv5_1));
    i_2_fu_2189_p2 <= std_logic_vector(unsigned(i1_reg_752) + unsigned(ap_const_lv5_1));
    i_3_fu_2596_p2 <= std_logic_vector(unsigned(i2_reg_831) + unsigned(ap_const_lv5_1));
    i_4_fu_2900_p2 <= std_logic_vector(unsigned(i4_reg_911) + unsigned(ap_const_lv7_1));
    i_5_fu_3056_p2 <= std_logic_vector(unsigned(max_index_1_reg_947) + unsigned(ap_const_lv4_1));
    in_r_address0 <= tmp_162_cast_fu_1324_p1(24 - 1 downto 0);

    in_r_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j1_cast_fu_2628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_reg_854),5));
    j_1_fu_2253_p2 <= std_logic_vector(unsigned(j_reg_763) + unsigned(ap_const_lv3_1));
    j_2_fu_2638_p2 <= std_logic_vector(unsigned(j1_reg_854) + unsigned(ap_const_lv3_1));
    j_3_fu_2936_p2 <= std_logic_vector(unsigned(j3_reg_935) + unsigned(ap_const_lv7_1));
    j_4_fu_3092_p2 <= std_logic_vector(unsigned(j4_reg_994) + unsigned(ap_const_lv7_1));
    k1_cast_fu_2701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k1_reg_865),9));
    k_1_fu_2711_p2 <= std_logic_vector(unsigned(k1_reg_865) + unsigned(ap_const_lv3_1));
    k_2_fu_2351_p2 <= std_logic_vector(unsigned(k_reg_774) + unsigned(ap_const_lv3_1));
    l_1_fu_2389_p2 <= std_logic_vector(unsigned(l_reg_786) + unsigned(ap_const_lv2_1));
    l_cast_fu_2379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_reg_786),4));
    m_1_fu_2468_p2 <= std_logic_vector(unsigned(m_reg_808) + unsigned(ap_const_lv2_1));
    m_cast_fu_2458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_808),4));
    max_index_1_cast_fu_3046_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_index_1_reg_947),32));
    max_index_2_fu_3259_p3 <= 
        max_index_1_cast_reg_3937 when (sel_tmp2_fu_3253_p2(0) = '1') else 
        sel_tmp_fu_3241_p3;
    max_value_10_to_int_fu_2493_p1 <= max_value_8_reg_819;
    max_value_11_fu_2576_p3 <= 
        reg_1065 when (tmp_113_fu_2571_p2(0) = '1') else 
        max_value_8_reg_819;
    max_value_12_fu_3273_p3 <= 
        reg_1053 when (sel_tmp2_reg_4000(0) = '1') else 
        max_value_15_fu_3266_p3;
    max_value_15_fu_3266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fc_dot_q0),64));
    max_value_15_fu_3266_p3 <= 
        max_value_15_fu_3266_p1 when (tmp_72_reg_3978(0) = '1') else 
        max_value_s_reg_971;
    max_value_16_to_int_fu_1711_p1 <= reg_1065;
    max_value_17_to_int_fu_3158_p1 <= reg_1053;
    max_value_18_to_int_fu_2511_p1 <= reg_1065;
    max_value_4_to_int_fu_1693_p1 <= max_value_4_reg_635;
    max_value_5_fu_1776_p3 <= 
        reg_1065 when (tmp_94_fu_1771_p2(0) = '1') else 
        max_value_4_reg_635;
    max_value_to_int_fu_3176_p1 <= max_value_s_reg_971;
    n_1_fu_2004_p2 <= std_logic_vector(unsigned(n_reg_741) + unsigned(ap_const_lv3_1));
    next_mul_fu_2584_p2 <= std_logic_vector(unsigned(phi_mul_reg_842) + unsigned(ap_const_lv9_19));
    notlhs1_fu_2150_p2 <= "0" when (tmp_77_fu_2136_p4 = ap_const_lv11_7FF) else "1";
    notlhs2_fu_1729_p2 <= "0" when (tmp_86_fu_1697_p4 = ap_const_lv11_7FF) else "1";
    notlhs3_fu_1747_p2 <= "0" when (tmp_88_fu_1715_p4 = ap_const_lv11_7FF) else "1";
    notlhs4_fu_2862_p2 <= "0" when (tmp_95_fu_2848_p4 = ap_const_lv11_7FF) else "1";
    notlhs5_fu_3014_p2 <= "0" when (tmp_100_fu_3000_p4 = ap_const_lv11_7FF) else "1";
    notlhs6_fu_2529_p2 <= "0" when (tmp_105_fu_2497_p4 = ap_const_lv11_7FF) else "1";
    notlhs7_fu_2547_p2 <= "0" when (tmp_107_fu_2515_p4 = ap_const_lv11_7FF) else "1";
    notlhs8_fu_3194_p2 <= "0" when (tmp_114_fu_3162_p4 = ap_const_lv11_7FF) else "1";
    notlhs9_fu_3212_p2 <= "0" when (tmp_116_fu_3180_p4 = ap_const_lv11_7FF) else "1";
    notlhs_fu_1350_p2 <= "0" when (tmp_14_fu_1336_p4 = ap_const_lv11_7FF) else "1";
    notrhs1_fu_2156_p2 <= "1" when (tmp_149_fu_2146_p1 = ap_const_lv52_0) else "0";
    notrhs2_fu_1735_p2 <= "1" when (tmp_151_fu_1707_p1 = ap_const_lv52_0) else "0";
    notrhs3_fu_1753_p2 <= "1" when (tmp_152_fu_1725_p1 = ap_const_lv52_0) else "0";
    notrhs4_fu_2868_p2 <= "1" when (tmp_154_fu_2858_p1 = ap_const_lv52_0) else "0";
    notrhs5_fu_3020_p2 <= "1" when (tmp_167_fu_3010_p1 = ap_const_lv52_0) else "0";
    notrhs6_fu_2535_p2 <= "1" when (tmp_174_fu_2507_p1 = ap_const_lv52_0) else "0";
    notrhs7_fu_2553_p2 <= "1" when (tmp_175_fu_2525_p1 = ap_const_lv52_0) else "0";
    notrhs8_fu_3200_p2 <= "1" when (tmp_190_fu_3172_p1 = ap_const_lv52_0) else "0";
    notrhs9_fu_3218_p2 <= "1" when (tmp_191_fu_3190_p1 = ap_const_lv52_0) else "0";
    notrhs_fu_1356_p2 <= "1" when (tmp_106_fu_1346_p1 = ap_const_lv52_0) else "0";
    p_shl10_fu_1835_p4 <= ((ap_const_lv56_1 & i_reg_647) & ap_const_lv3_0);
    p_shl11_fu_1845_p4 <= ((ap_const_lv58_1 & i_reg_647) & ap_const_lv1_0);
    p_shl12_cast_fu_1519_p3 <= (tmp_48_fu_1515_p1 & ap_const_lv4_0);
    p_shl12_fu_2195_p4 <= ((ap_const_lv55_1 & i1_reg_752) & ap_const_lv4_0);
    p_shl13_cast_fu_1531_p3 <= (tmp_55_fu_1527_p1 & ap_const_lv1_0);
    p_shl13_fu_2205_p4 <= ((ap_const_lv58_1 & i1_reg_752) & ap_const_lv1_0);
    p_shl14_cast_fu_1480_p3 <= (tmp_35_fu_1476_p1 & ap_const_lv5_0);
    p_shl14_fu_2221_p4 <= ((ap_const_lv54_1 & i1_reg_752) & ap_const_lv5_0);
    p_shl15_cast_fu_1492_p3 <= (tmp_37_fu_1488_p1 & ap_const_lv2_0);
    p_shl15_fu_2231_p4 <= ((ap_const_lv57_1 & i1_reg_752) & ap_const_lv2_0);
    p_shl16_cast_fu_1613_p3 <= (tmp_132_fu_1609_p1 & ap_const_lv5_0);
    p_shl16_fu_2602_p4 <= ((ap_const_lv55_1 & i2_reg_831) & ap_const_lv4_0);
    p_shl17_cast_fu_1625_p3 <= (tmp_133_fu_1621_p1 & ap_const_lv2_0);
    p_shl17_fu_2612_p4 <= ((ap_const_lv58_1 & i2_reg_831) & ap_const_lv1_0);
    p_shl18_fu_2014_p4 <= ((ap_const_lv57_2 & n_reg_741) & ap_const_lv4_0);
    p_shl19_fu_2024_p4 <= ((ap_const_lv60_2 & n_reg_741) & ap_const_lv1_0);
    p_shl1_fu_1395_p4 <= ((ap_const_lv57_2 & channel1_reg_568) & ap_const_lv4_0);
    p_shl22_cast_fu_1886_p3 <= (tmp_87_fu_1882_p1 & ap_const_lv5_0);
    p_shl23_cast_fu_1898_p3 <= (tmp_89_fu_1894_p1 & ap_const_lv2_0);
    p_shl24_cast_fu_2110_p3 <= (tmp_187_reg_3640 & ap_const_lv2_0);
    p_shl26_cast_fu_2058_p3 <= (tmp_178_reg_3614 & ap_const_lv4_0);
    p_shl27_cast_fu_2065_p3 <= (tmp_179_reg_3619 & ap_const_lv1_0);
    p_shl2_fu_1136_p4 <= ((ap_const_lv60_2 & channel_reg_486) & ap_const_lv1_0);
    p_shl34_cast_fu_2319_p3 <= (tmp_126_fu_2315_p1 & ap_const_lv4_0);
    p_shl35_cast_fu_2331_p3 <= (tmp_127_fu_2327_p1 & ap_const_lv1_0);
    p_shl36_cast_fu_2280_p3 <= (tmp_117_fu_2276_p1 & ap_const_lv5_0);
    p_shl37_cast_fu_2292_p3 <= (tmp_123_fu_2288_p1 & ap_const_lv2_0);
    p_shl38_cast_fu_2413_p3 <= (tmp_163_fu_2409_p1 & ap_const_lv5_0);
    p_shl39_cast_fu_2425_p3 <= (tmp_164_fu_2421_p1 & ap_const_lv2_0);
    p_shl3_fu_1110_p4 <= ((ap_const_lv56_2 & channel_reg_486) & ap_const_lv5_0);
    p_shl42_cast_fu_2657_p3 <= (tmp_145_fu_2653_p1 & ap_const_lv4_0);
    p_shl43_cast_fu_2669_p3 <= (tmp_146_fu_2665_p1 & ap_const_lv1_0);
    p_shl44_cast_fu_2802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_155_fu_2794_p3),17));
    p_shl45_cast_fu_2814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_156_fu_2806_p3),17));
    p_shl46_cast_fu_2950_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_168_fu_2942_p3),15));
    p_shl47_cast_fu_2962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_169_fu_2954_p3),15));
    p_shl48_cast_fu_3106_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_192_fu_3098_p3),15));
    p_shl49_cast_fu_3118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_193_fu_3110_p3),15));
    p_shl4_fu_1120_p4 <= ((ap_const_lv59_2 & channel_reg_486) & ap_const_lv2_0);
    p_shl5_cast_fu_1177_p3 <= (tmp_16_fu_1173_p1 & ap_const_lv5_0);
    p_shl5_fu_1405_p4 <= ((ap_const_lv60_2 & channel1_reg_568) & ap_const_lv1_0);
    p_shl6_cast_fu_1189_p3 <= (tmp_17_fu_1185_p1 & ap_const_lv2_0);
    p_shl6_fu_1809_p4 <= ((ap_const_lv54_1 & i_reg_647) & ap_const_lv5_0);
    p_shl7_cast_fu_1305_p3 <= (tmp_140_fu_1301_p1 & ap_const_lv2_0);
    p_shl7_fu_1819_p4 <= ((ap_const_lv57_1 & i_reg_647) & ap_const_lv2_0);
    p_shl8_fu_1421_p4 <= ((ap_const_lv56_2 & channel1_reg_568) & ap_const_lv5_0);
    p_shl9_fu_1431_p4 <= ((ap_const_lv59_2 & channel1_reg_568) & ap_const_lv2_0);
    p_shl_fu_2683_p3 <= (j1_reg_854 & ap_const_lv2_0);

    pool_dot_address0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state46, ap_CS_fsm_state69, ap_CS_fsm_state76, tmp_154_cast_fu_1648_p1, tmp_198_cast_fu_2106_p1, tmp_181_cast_fu_2448_p1, tmp_180_cast_fu_2726_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            pool_dot_address0 <= tmp_180_cast_fu_2726_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            pool_dot_address0 <= tmp_181_cast_fu_2448_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            pool_dot_address0 <= tmp_198_cast_fu_2106_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            pool_dot_address0 <= tmp_154_cast_fu_1648_p1(14 - 1 downto 0);
        else 
            pool_dot_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    pool_dot_ce0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state46, ap_CS_fsm_state69, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            pool_dot_ce0 <= ap_const_logic_1;
        else 
            pool_dot_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pool_dot_d0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state69, max_value_3_reg_613, max_value_9_reg_797)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            pool_dot_d0 <= max_value_9_reg_797;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            pool_dot_d0 <= max_value_3_reg_613;
        else 
            pool_dot_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pool_dot_we0_assign_proc : process(ap_CS_fsm_state33, exitcond21_fu_1583_p2, ap_CS_fsm_state69, exitcond10_fu_2383_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond21_fu_1583_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state69) and (exitcond10_fu_2383_p2 = ap_const_lv1_1)))) then 
            pool_dot_we0 <= ap_const_logic_1;
        else 
            pool_dot_we0 <= ap_const_logic_0;
        end if; 
    end process;

    row_1_fu_1209_p2 <= std_logic_vector(unsigned(row_reg_510) + unsigned(ap_const_lv5_1));
    row_2_fu_1551_p2 <= std_logic_vector(unsigned(row3_reg_590) + unsigned(ap_const_lv4_1));
    row_3_fu_1918_p2 <= std_logic_vector(unsigned(row7_reg_671) + unsigned(ap_const_lv4_1));
    row_4_fu_2788_p2 <= std_logic_vector(unsigned(row4_reg_899) + unsigned(ap_const_lv9_1));
    sel_tmp1_fu_3248_p2 <= (tmp_72_reg_3978 xor ap_const_lv1_1);
    sel_tmp2_fu_3253_p2 <= (tmp_122_fu_3236_p2 and sel_tmp1_fu_3248_p2);
    sel_tmp_fu_3241_p3 <= 
        ap_const_lv32_0 when (tmp_72_reg_3978(0) = '1') else 
        max_index_reg_959;
    storemerge1_fu_2171_p3 <= 
        ap_const_lv64_0 when (tmp_85_fu_2166_p2(0) = '1') else 
        reg_1053;
    storemerge2_fu_2885_p3 <= 
        ap_const_lv64_0 when (tmp_99_fu_2880_p2(0) = '1') else 
        reg_1053;
    storemerge3_fu_3037_p3 <= 
        ap_const_lv64_0 when (tmp_104_fu_3032_p2(0) = '1') else 
        reg_1053;
    storemerge_fu_1371_p3 <= 
        ap_const_lv64_0 when (tmp_51_fu_1366_p2(0) = '1') else 
        reg_1053;
    tmp8_cast_fu_2697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp8_fu_2691_p2),9));
    tmp8_fu_2691_p2 <= std_logic_vector(unsigned(p_shl_fu_2683_p3) + unsigned(j1_cast_fu_2628_p1));
    tmp9_fu_2731_p2 <= std_logic_vector(unsigned(k1_cast_fu_2701_p1) + unsigned(phi_mul_reg_842));
    tmp_100_fu_3000_p4 <= tmp_56_to_int_fu_2996_p1(62 downto 52);
    tmp_101_fu_1569_p2 <= std_logic_vector(unsigned(tmp_12_cast_fu_1565_p1) + unsigned(tmp_42_reg_3450));
    tmp_102_fu_3026_p2 <= (notrhs5_fu_3020_p2 or notlhs5_fu_3014_p2);
    tmp_104_fu_3032_p2 <= (tmp_102_fu_3026_p2 and tmp_103_reg_3932);
    tmp_105_fu_2497_p4 <= max_value_10_to_int_fu_2493_p1(62 downto 52);
    tmp_106_fu_1346_p1 <= tmp_13_to_int_fu_1332_p1(52 - 1 downto 0);
    tmp_107_fu_2515_p4 <= max_value_18_to_int_fu_2511_p1(62 downto 52);
    tmp_108_fu_2622_p2 <= std_logic_vector(unsigned(p_shl16_fu_2602_p4) - unsigned(p_shl17_fu_2612_p4));
    tmp_109_fu_2541_p2 <= (notrhs6_fu_2535_p2 or notlhs6_fu_2529_p2);
    tmp_10_fu_1873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col6_reg_659),64));
    tmp_110_fu_2559_p2 <= (notrhs7_fu_2553_p2 or notlhs7_fu_2547_p2);
    tmp_111_fu_2565_p2 <= (tmp_109_fu_2541_p2 and tmp_110_fu_2559_p2);
    tmp_113_fu_2571_p2 <= (tmp_111_fu_2565_p2 and tmp_112_reg_3766);
    tmp_114_fu_3162_p4 <= max_value_17_to_int_fu_3158_p1(62 downto 52);
    tmp_115_fu_2271_p2 <= std_logic_vector(unsigned(tmp_22_fu_2267_p1) + unsigned(tmp_76_reg_3693));
    tmp_116_fu_3180_p4 <= max_value_to_int_fu_3176_p1(62 downto 52);
    tmp_117_fu_2276_p1 <= tmp_115_fu_2271_p2(12 - 1 downto 0);
    tmp_118_fu_3206_p2 <= (notrhs8_fu_3200_p2 or notlhs8_fu_3194_p2);
    tmp_119_fu_3224_p2 <= (notrhs9_fu_3218_p2 or notlhs9_fu_3212_p2);
    tmp_11_fu_1557_p3 <= (row3_reg_590 & ap_const_lv1_0);
    tmp_120_fu_3230_p2 <= (tmp_118_fu_3206_p2 and tmp_119_fu_3224_p2);
    tmp_122_fu_3236_p2 <= (tmp_120_fu_3230_p2 and tmp_121_reg_3995);
    tmp_123_fu_2288_p1 <= tmp_115_fu_2271_p2(15 - 1 downto 0);
    tmp_124_fu_2300_p2 <= std_logic_vector(unsigned(p_shl36_cast_fu_2280_p3) - unsigned(p_shl37_cast_fu_2292_p3));
    tmp_125_fu_2310_p2 <= std_logic_vector(unsigned(tmp_23_fu_2306_p1) + unsigned(tmp_65_reg_3688));
    tmp_126_fu_2315_p1 <= tmp_125_fu_2310_p2(11 - 1 downto 0);
    tmp_127_fu_2327_p1 <= tmp_125_fu_2310_p2(14 - 1 downto 0);
    tmp_128_fu_2339_p2 <= std_logic_vector(unsigned(p_shl34_cast_fu_2319_p3) - unsigned(p_shl35_cast_fu_2331_p3));
    tmp_129_fu_1928_p2 <= std_logic_vector(unsigned(tmp_96_reg_3552) + unsigned(tmp_24_cast_fu_1924_p1));
    tmp_12_cast_fu_1565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_1557_p3),17));
    tmp_12_fu_1168_p2 <= std_logic_vector(unsigned(tmp_2_reg_3311) + unsigned(tmp_4_fu_1164_p1));
    tmp_130_fu_1643_p2 <= std_logic_vector(unsigned(tmp_57_reg_3455) + unsigned(tmp_25_cast_fu_1639_p1));
    tmp_131_fu_1604_p2 <= std_logic_vector(unsigned(tmp_s_reg_3431) + unsigned(tmp_27_fu_1600_p1));
    tmp_132_fu_1609_p1 <= tmp_131_fu_1604_p2(12 - 1 downto 0);
    tmp_133_fu_1621_p1 <= tmp_131_fu_1604_p2(15 - 1 downto 0);
    tmp_134_fu_1633_p2 <= std_logic_vector(unsigned(p_shl16_cast_fu_1613_p3) - unsigned(p_shl17_cast_fu_1625_p3));
    tmp_135_fu_1277_p3 <= (tmp_15_reg_3355 & tmp_28_fu_1271_p2);
    tmp_136_cast_fu_1224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_61_fu_1219_p2),64));
    tmp_138_fu_1292_p2 <= std_logic_vector(unsigned(tmp_30_fu_1288_p1) + unsigned(tmp_5_reg_3316));
    tmp_139_fu_1297_p1 <= tmp_138_fu_1292_p2(14 - 1 downto 0);
    tmp_13_to_int_fu_1332_p1 <= reg_1053;
    tmp_140_fu_1301_p1 <= tmp_138_fu_1292_p2(12 - 1 downto 0);
    tmp_141_fu_1313_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_1305_p3) + unsigned(tmp_139_fu_1297_p1));
    tmp_142_fu_1319_p2 <= std_logic_vector(unsigned(tmp_17_cast_reg_3360) + unsigned(tmp_141_fu_1313_p2));
    tmp_143_cast_fu_1574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_101_fu_1569_p2),64));
    tmp_143_fu_2771_p2 <= std_logic_vector(unsigned(tmp_32_cast_fu_2767_p1) + unsigned(ap_const_lv8_78));
    tmp_144_fu_2648_p2 <= std_logic_vector(unsigned(tmp_34_fu_2644_p1) + unsigned(tmp_108_reg_3789));
    tmp_145_fu_2653_p1 <= tmp_144_fu_2648_p2(11 - 1 downto 0);
    tmp_146_fu_2665_p1 <= tmp_144_fu_2648_p2(14 - 1 downto 0);
    tmp_147_fu_2677_p2 <= std_logic_vector(unsigned(p_shl42_cast_fu_2657_p3) - unsigned(p_shl43_cast_fu_2669_p3));
    tmp_148_fu_2369_p2 <= std_logic_vector(unsigned(tmp_37_cast_fu_2365_p1) + unsigned(tmp_124_reg_3712));
    tmp_149_fu_2146_p1 <= tmp_38_to_int_fu_2132_p1(52 - 1 downto 0);
    tmp_14_fu_1336_p4 <= tmp_13_to_int_fu_1332_p1(62 downto 52);
    tmp_150_fu_1683_p2 <= std_logic_vector(unsigned(tmp_134_reg_3486) + unsigned(tmp_44_cast_fu_1679_p1));
    tmp_151_fu_1707_p1 <= max_value_4_to_int_fu_1693_p1(52 - 1 downto 0);
    tmp_152_fu_1725_p1 <= max_value_16_to_int_fu_1711_p1(52 - 1 downto 0);
    tmp_153_cast_fu_1933_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_129_fu_1928_p2),64));
    tmp_153_fu_2919_p2 <= std_logic_vector(unsigned(tmp_33_cast_fu_2915_p1) + unsigned(ap_const_lv9_F0));
    tmp_154_cast_fu_1648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_130_fu_1643_p2),64));
    tmp_154_fu_2858_p1 <= tmp_49_to_int_fu_2844_p1(52 - 1 downto 0);
    tmp_155_fu_2794_p3 <= (row4_reg_899 & ap_const_lv7_0);
    tmp_156_fu_2806_p3 <= (row4_reg_899 & ap_const_lv3_0);
    tmp_157_fu_2818_p2 <= std_logic_vector(unsigned(p_shl44_cast_fu_2802_p1) - unsigned(p_shl45_cast_fu_2814_p1));
    tmp_158_fu_2824_p2 <= std_logic_vector(unsigned(tmp_157_fu_2818_p2) + unsigned(ap_const_lv17_BB80));
    tmp_159_fu_2830_p2 <= std_logic_vector(unsigned(tmp_158_fu_2824_p2) + unsigned(tmp_32_cast1_reg_3838));
    tmp_15_fu_1245_p2 <= std_logic_vector(unsigned(col_reg_498) + unsigned(fil_col_cast_fu_1229_p1));
    tmp_160_fu_2721_p2 <= std_logic_vector(unsigned(tmp_147_reg_3802) + unsigned(tmp_57_cast_fu_2717_p1));
    tmp_161_fu_2443_p2 <= std_logic_vector(unsigned(tmp_128_reg_3717) + unsigned(tmp_61_cast_fu_2439_p1));
        tmp_162_cast_fu_1324_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_137_reg_3373),64));

    tmp_162_fu_2404_p2 <= std_logic_vector(unsigned(tmp_76_reg_3693) + unsigned(tmp_63_fu_2400_p1));
    tmp_163_fu_2409_p1 <= tmp_162_fu_2404_p2(12 - 1 downto 0);
    tmp_164_fu_2421_p1 <= tmp_162_fu_2404_p2(15 - 1 downto 0);
    tmp_165_fu_2433_p2 <= std_logic_vector(unsigned(p_shl38_cast_fu_2413_p3) - unsigned(p_shl39_cast_fu_2425_p3));
    tmp_166_cast_fu_1328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_142_reg_3378),64));
    tmp_166_fu_3075_p2 <= std_logic_vector(unsigned(tmp_47_cast_fu_3071_p1) + unsigned(ap_const_lv9_168));
    tmp_167_cast_fu_2777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_143_fu_2771_p2),64));
    tmp_167_fu_3010_p1 <= tmp_56_to_int_fu_2996_p1(52 - 1 downto 0);
    tmp_168_fu_2942_p3 <= (j3_reg_935 & ap_const_lv7_0);
    tmp_169_fu_2954_p3 <= (j3_reg_935 & ap_const_lv3_0);
    tmp_16_fu_1173_p1 <= tmp_12_fu_1168_p2(12 - 1 downto 0);
    tmp_170_fu_2966_p2 <= std_logic_vector(unsigned(p_shl46_cast_fu_2950_p1) - unsigned(p_shl47_cast_fu_2962_p1));
    tmp_171_fu_2976_p2 <= std_logic_vector(signed(tmp_189_cast_fu_2972_p1) + signed(ap_const_lv17_17700));
    tmp_172_cast_fu_2374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_148_fu_2369_p2),64));
    tmp_172_fu_2982_p2 <= std_logic_vector(unsigned(tmp_171_fu_2976_p2) + unsigned(tmp_33_cast1_reg_3894));
    tmp_173_cast_fu_1688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_150_fu_1683_p2),64));
    tmp_173_fu_2483_p2 <= std_logic_vector(unsigned(tmp_165_reg_3748) + unsigned(tmp_76_cast_fu_2479_p1));
    tmp_174_cast_fu_2925_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_153_fu_2919_p2),64));
    tmp_174_fu_2507_p1 <= max_value_10_to_int_fu_2493_p1(52 - 1 downto 0);
    tmp_175_fu_2525_p1 <= max_value_18_to_int_fu_2511_p1(52 - 1 downto 0);
    tmp_176_fu_2034_p2 <= std_logic_vector(unsigned(p_shl18_fu_2014_p4) - unsigned(p_shl19_fu_2024_p4));
    tmp_177_fu_2040_p2 <= std_logic_vector(unsigned(tmp_176_fu_2034_p2) + unsigned(tmp_41_reg_3578));
    tmp_178_fu_2045_p1 <= tmp_177_fu_2040_p2(11 - 1 downto 0);
    tmp_179_cast_fu_2840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_159_reg_3861),64));
    tmp_179_fu_2049_p1 <= tmp_177_fu_2040_p2(14 - 1 downto 0);
    tmp_17_cast_fu_1251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fil_col_reg_534),14));
    tmp_17_fu_1185_p1 <= tmp_12_fu_1168_p2(15 - 1 downto 0);
    tmp_180_cast_fu_2726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_160_fu_2721_p2),64));
    tmp_180_fu_2072_p2 <= std_logic_vector(unsigned(p_shl26_cast_fu_2058_p3) - unsigned(p_shl27_cast_fu_2065_p3));
    tmp_181_cast_fu_2448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_161_fu_2443_p2),64));
    tmp_181_fu_2078_p2 <= std_logic_vector(unsigned(tmp_180_fu_2072_p2) + unsigned(tmp_65_cast_reg_3596));
    tmp_182_fu_2053_p2 <= std_logic_vector(unsigned(tmp_25_reg_3539) + unsigned(tmp_78_fu_2010_p1));
    tmp_183_fu_2083_p2 <= std_logic_vector(shift_left(unsigned(tmp_182_reg_3624),to_integer(unsigned('0' & ap_const_lv64_2(31-1 downto 0)))));
    tmp_184_fu_2088_p2 <= std_logic_vector(unsigned(tmp_182_reg_3624) + unsigned(tmp_183_fu_2083_p2));
    tmp_185_fu_2093_p2 <= std_logic_vector(unsigned(tmp_184_fu_2088_p2) + unsigned(tmp_66_reg_3601));
    tmp_186_cast_fu_3081_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_166_fu_3075_p2),64));
    tmp_186_fu_2098_p1 <= tmp_185_fu_2093_p2(14 - 1 downto 0);
    tmp_187_fu_2102_p1 <= tmp_185_fu_2093_p2(12 - 1 downto 0);
    tmp_188_fu_2117_p2 <= std_logic_vector(unsigned(tmp_186_reg_3635) + unsigned(p_shl24_cast_fu_2110_p3));
        tmp_189_cast_fu_2972_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_170_fu_2966_p2),17));

    tmp_189_fu_2122_p2 <= std_logic_vector(unsigned(tmp_188_fu_2117_p2) + unsigned(tmp_42_cast_reg_3583));
    tmp_190_fu_3172_p1 <= max_value_17_to_int_fu_3158_p1(52 - 1 downto 0);
    tmp_191_cast_fu_2992_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_172_reg_3917),64));
    tmp_191_fu_3190_p1 <= max_value_to_int_fu_3176_p1(52 - 1 downto 0);
    tmp_192_cast_fu_2488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_173_fu_2483_p2),64));
    tmp_192_fu_3098_p3 <= (j4_reg_994 & ap_const_lv7_0);
    tmp_193_fu_3110_p3 <= (j4_reg_994 & ap_const_lv3_0);
    tmp_194_fu_3122_p2 <= std_logic_vector(unsigned(p_shl48_cast_fu_3106_p1) - unsigned(p_shl49_cast_fu_3118_p1));
    tmp_195_fu_3132_p2 <= std_logic_vector(signed(tmp_208_cast_fu_3128_p1) + signed(ap_const_lv18_23280));
    tmp_196_fu_3138_p2 <= std_logic_vector(unsigned(tmp_195_fu_3132_p2) + unsigned(tmp_47_cast1_reg_3950));
    tmp_198_cast_fu_2106_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_181_reg_3630),64));
    tmp_19_fu_1197_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_1177_p3) - unsigned(p_shl6_cast_fu_1189_p3));
    tmp_1_fu_1101_p3 <= (ap_const_lv61_2 & channel_reg_486);
    tmp_205_cast_fu_2127_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_189_fu_2122_p2),64));
        tmp_208_cast_fu_3128_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_194_fu_3122_p2),18));

    tmp_20_fu_1796_p3 <= (ap_const_lv59_1 & i_reg_647);
    tmp_210_cast_fu_3154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_196_reg_3973),64));
    tmp_21_fu_2259_p3 <= (j_reg_763 & ap_const_lv1_0);
    tmp_22_fu_2267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_2259_p3),64));
    tmp_23_fu_2306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_763),64));
    tmp_24_cast_fu_1924_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row7_reg_671),17));
    tmp_24_fu_1829_p2 <= std_logic_vector(unsigned(p_shl6_fu_1809_p4) - unsigned(p_shl7_fu_1819_p4));
    tmp_25_cast_fu_1639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row3_reg_590),15));
    tmp_25_fu_1855_p2 <= std_logic_vector(unsigned(p_shl10_fu_1835_p4) - unsigned(p_shl11_fu_1845_p4));
    tmp_26_fu_1595_p2 <= std_logic_vector(unsigned(fil_col4_cast_fu_1579_p1) + unsigned(tmp_7_reg_3445));
    tmp_27_fu_1600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_1595_p2),64));
    tmp_28_fu_1271_p2 <= std_logic_vector(unsigned(row_reg_510) + unsigned(fil_row_cast_fu_1255_p1));
    tmp_29_fu_1471_p2 <= std_logic_vector(unsigned(tmp_8_fu_1467_p1) + unsigned(tmp_s_reg_3431));
    tmp_2_fu_1130_p2 <= std_logic_vector(unsigned(p_shl3_fu_1110_p4) - unsigned(p_shl4_fu_1120_p4));
    tmp_30_fu_1288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fil_row_reg_557),64));
    tmp_32_cast1_fu_2763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col4_reg_876),17));
    tmp_32_cast_fu_2767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col4_reg_876),8));
    tmp_33_cast1_fu_2911_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_reg_911),17));
    tmp_33_cast_fu_2915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_reg_911),9));
    tmp_34_fu_2644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_reg_854),64));
    tmp_35_fu_1476_p1 <= tmp_29_fu_1471_p2(12 - 1 downto 0);
    tmp_36_fu_2357_p3 <= (k_reg_774 & ap_const_lv1_0);
    tmp_37_cast_fu_2365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_fu_2357_p3),17));
    tmp_37_fu_1488_p1 <= tmp_29_fu_1471_p2(15 - 1 downto 0);
    tmp_38_to_int_fu_2132_p1 <= reg_1053;
    tmp_39_fu_1362_p2 <= (notrhs_reg_3403 or notlhs_reg_3398);
    tmp_40_fu_1954_p2 <= std_logic_vector(unsigned(fil_col8_cast_fu_1938_p1) + unsigned(col6_reg_659));
    tmp_41_fu_1960_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_fu_1954_p2),64));
    tmp_42_cast_fu_1964_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fil_col8_reg_695),14));
    tmp_42_fu_1500_p2 <= std_logic_vector(unsigned(p_shl14_cast_fu_1480_p3) - unsigned(p_shl15_cast_fu_1492_p3));
    tmp_43_fu_1674_p2 <= std_logic_vector(unsigned(fil_row5_cast_fu_1658_p1) + unsigned(tmp_11_reg_3468));
    tmp_44_cast_fu_1679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_fu_1674_p2),17));
    tmp_44_fu_1510_p2 <= std_logic_vector(unsigned(tmp_9_fu_1506_p1) + unsigned(tmp_6_reg_3426));
    tmp_47_cast1_fu_3067_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_index_1_reg_947),18));
    tmp_47_cast_fu_3071_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_index_1_reg_947),9));
    tmp_48_fu_1515_p1 <= tmp_44_fu_1510_p2(11 - 1 downto 0);
    tmp_49_to_int_fu_2844_p1 <= reg_1053;
    tmp_4_fu_1164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_reg_498),64));
    tmp_51_fu_1366_p2 <= (tmp_39_fu_1362_p2 and tmp_45_reg_3408);
    tmp_52_fu_2835_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row4_reg_899),64));
    tmp_55_fu_1527_p1 <= tmp_44_fu_1510_p2(14 - 1 downto 0);
    tmp_56_to_int_fu_2996_p1 <= reg_1053;
    tmp_57_cast_fu_2717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k1_reg_865),15));
    tmp_57_fu_1539_p2 <= std_logic_vector(unsigned(p_shl12_cast_fu_1519_p3) - unsigned(p_shl13_cast_fu_1531_p3));
    tmp_59_fu_2737_p2 <= std_logic_vector(unsigned(tmp8_cast_reg_3807) + unsigned(tmp9_fu_2731_p2));
    tmp_5_fu_1146_p2 <= std_logic_vector(unsigned(p_shl3_fu_1110_p4) - unsigned(p_shl2_fu_1136_p4));
    tmp_60_fu_2742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_reg_3825),64));
    tmp_61_cast_fu_2439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_774),15));
    tmp_61_fu_1219_p2 <= std_logic_vector(unsigned(tmp_19_reg_3329) + unsigned(tmp_cast_fu_1215_p1));
    tmp_62_fu_2395_p2 <= std_logic_vector(unsigned(l_cast_fu_2379_p1) + unsigned(tmp_21_reg_3707));
    tmp_63_fu_2400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_fu_2395_p2),64));
    tmp_64_fu_1984_p2 <= std_logic_vector(unsigned(fil_row9_cast_fu_1968_p1) + unsigned(row7_reg_671));
    tmp_65_cast_fu_1990_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_64_fu_1984_p2),15));
    tmp_65_fu_2215_p2 <= std_logic_vector(unsigned(p_shl12_fu_2195_p4) - unsigned(p_shl13_fu_2205_p4));
    tmp_66_fu_1994_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fil_row9_reg_718),64));
    tmp_6_fu_1415_p2 <= std_logic_vector(unsigned(p_shl1_fu_1395_p4) - unsigned(p_shl5_fu_1405_p4));
    tmp_72_fu_3143_p2 <= "1" when (max_index_1_reg_947 = ap_const_lv4_0) else "0";
    tmp_75_fu_2474_p2 <= std_logic_vector(unsigned(m_cast_fu_2458_p1) + unsigned(tmp_36_reg_3730));
    tmp_76_cast_fu_2479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_75_fu_2474_p2),17));
    tmp_76_fu_2241_p2 <= std_logic_vector(unsigned(p_shl14_fu_2221_p4) - unsigned(p_shl15_fu_2231_p4));
    tmp_77_fu_2136_p4 <= tmp_38_to_int_fu_2132_p1(62 downto 52);
    tmp_78_fu_2010_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_741),64));
    tmp_7_fu_1459_p3 <= (col2_reg_579 & ap_const_lv1_0);
    tmp_82_fu_1877_p2 <= std_logic_vector(unsigned(tmp_24_reg_3534) + unsigned(tmp_10_fu_1873_p1));
    tmp_83_fu_2162_p2 <= (notrhs1_reg_3665 or notlhs1_reg_3660);
    tmp_85_fu_2166_p2 <= (tmp_83_fu_2162_p2 and tmp_84_reg_3670);
    tmp_86_fu_1697_p4 <= max_value_4_to_int_fu_1693_p1(62 downto 52);
    tmp_87_fu_1882_p1 <= tmp_82_fu_1877_p2(12 - 1 downto 0);
    tmp_88_fu_1715_p4 <= max_value_16_to_int_fu_1711_p1(62 downto 52);
    tmp_89_fu_1894_p1 <= tmp_82_fu_1877_p2(15 - 1 downto 0);
    tmp_8_fu_1467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_1459_p3),64));
    tmp_90_fu_1741_p2 <= (notrhs2_fu_1735_p2 or notlhs2_fu_1729_p2);
    tmp_91_fu_1759_p2 <= (notrhs3_fu_1753_p2 or notlhs3_fu_1747_p2);
    tmp_92_fu_1765_p2 <= (tmp_90_fu_1741_p2 and tmp_91_fu_1759_p2);
    tmp_94_fu_1771_p2 <= (tmp_92_fu_1765_p2 and tmp_93_reg_3504);
    tmp_95_fu_2848_p4 <= tmp_49_to_int_fu_2844_p1(62 downto 52);
    tmp_96_fu_1906_p2 <= std_logic_vector(unsigned(p_shl22_cast_fu_1886_p3) - unsigned(p_shl23_cast_fu_1898_p3));
    tmp_97_fu_2874_p2 <= (notrhs4_fu_2868_p2 or notlhs4_fu_2862_p2);
    tmp_99_fu_2880_p2 <= (tmp_97_fu_2874_p2 and tmp_98_reg_3881);
    tmp_9_fu_1506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col2_reg_579),64));
    tmp_cast_fu_1215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_reg_510),17));
    tmp_fu_1085_p1 <= index(25 - 1 downto 0);
    tmp_s_fu_1441_p2 <= std_logic_vector(unsigned(p_shl8_fu_1421_p4) - unsigned(p_shl9_fu_1431_p4));
end behav;
